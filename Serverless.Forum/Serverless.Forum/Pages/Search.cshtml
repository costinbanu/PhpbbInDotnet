@page
@model Serverless.Forum.Pages.SearchModel
@{
    ViewData["Title"] = "Search";
    Layout = "~/Pages/_Layout.cshtml";
    var dateFormat = (await Model.GetCurrentUserAsync())?.UserDateFormat ?? "dddd, dd.MM.yyyy, HH:mm";
}

<h2>Caută</h2>
<script type="text/javascript">
    window.onload = function () {
        onPostLoad();
    }

    //forum tree callback
    function forumSelectCallback(forumId) {
        var forumInput = document.getElementById("ForumIdInput");
        if (forumInput != null) {
            forumInput.value = forumId;
        }
    }

    //forum tree callback
    function topicSelectCallback(topics) {
        var topicDisplay = document.getElementById("TopicIdDisplay");
        if (topicDisplay != null) {
            topicDisplay.options.length = 0;
            var option = document.createElement('option');
            option.text = "Caută în toate subiectele";
            option.value = 0;
            topicDisplay.add(option);
            topics.forEach(t => {
                var option = document.createElement('option');
                option.text = t.title;
                option.value = t.id;
                topicDisplay.add(option);
            });
        }
    }

    //forum tree callback
    function topicSelectInit(topicId) {
        if (topicId != null) {
            $("#TopicIdDisplay").val(topicId).change();
        }
    }
</script>

<form method="post">
    <input asp-for="QueryString" type="hidden" />
    <input asp-for="PageNum" type="hidden" />
    <input asp-for="TotalResults" type="hidden" />
    <input asp-for="AuthorId" type="hidden" id="authorId" />

    <input asp-for="SearchText" type="text" placeholder="Caută după text..." style="width:100%" />
    <p>&nbsp;</p>
    <a href="javascript:showElement('advanced')">Căutare avansată</a>
    <p>&nbsp;</p>
    <div id="advanced" style="display:none">
        Caută în forumul...
        <div style="height:400px; max-height:600px; overflow-y:scroll">
            @await Html.PartialAsync(
                "_ForumTreePartial",
                 new CustomPartials._ForumTreePartialModel
                 {
                     Forums = await Model.GetForumTreeAsync(),
                     ForumId = Model.ForumId,
                     TopicId = Model.TopicId,
                     PathToForumOrTopic = await Model.PathToForumOrTopic(Model.ForumId ?? 0, Model.TopicId)
                 },
                ViewData
            )
        </div>
        <input asp-for="ForumId" type="hidden" id="ForumIdInput" />
        <p>&nbsp;</p>
        Caută în subiectul...<br />
        <select name="TopicId" id="TopicIdDisplay" style="width:100%">
            <option selected disabled value="-1">Caută în subiectul...</option>
            <option value="0">Caută în toate subiectele</option>
        </select>
        <p>&nbsp;</p>
        <input asp-for="Author" type="text" placeholder="Caută după autor..." id="AuthorInput" style="width:100%" autocomplete="off" />
        <p>&nbsp;</p>
    </div>
    <input type="submit" value="Trimite" />
</form>

@if (Model.Posts != null && Model.Posts.Any())
{
    <h2>Rezultate</h2>
    @await  Html.PartialAsync(
        "_PaginationControlsPartial",
        new CustomPartials._PaginationControlsPartialModel(
            pagination: Model,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: false,
            topicId: null,
            lastPostId: Model.Posts.LastOrDefault()?.PostId
        ),
        ViewData
    )

    foreach (var post in Model.Posts)
    {
        <div class="ForumListRow">
            <div class="ForumContent" id="@post.PostId">
                <a asp-page="/ViewTopic" asp-page-handler="ByPostId" asp-route-postId="@post.PostId"><h4>@Html.Raw(post.PostSubject)</h4></a>
                <p>@Html.Raw(post.PostText)</p>
                <span style="margin-top:auto; display:inline-block">
                    @if (!string.IsNullOrWhiteSpace(post.AuthorSignature))
                    {
                        <br />
                        <span style="width:25%; display:inline-block; border-bottom:solid 1px black">&nbsp;</span>
                        <br />
                        <span class="Caption">@Html.Raw(post.AuthorSignature)</span>
                    }
                </span>
            </div>
            @await Html.PartialAsync(
                "_SummaryPartial",
                new CustomPartials._SummaryPartialModel(
                    post.AuthorId, 
                    post.AuthorName, 
                    post.AuthorColor, 
                    post.PostCreationTime, 
                    post.PostId.Value, 
                    dateFormat, 
                    post.AuthorHasAvatar, 
                    null, 
                    null, 
                    null,
                    true
                )
            )
        </div>
    }
    <p>&nbsp;</p>
    @await  Html.PartialAsync(
        "_PaginationControlsPartial",
        new CustomPartials._PaginationControlsPartialModel(
            pagination: Model,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: true,
            topicId: null,
            lastPostId: Model.Posts.LastOrDefault()?.PostId
        ),
        ViewData
    )
}

<link rel="stylesheet" href="~/lib/tribute/dist/tribute.css" />
<script src="~/lib/tribute/dist/tribute.js"></script>
<script>
    var tribute = new Tribute({
        values: @Json.Serialize(Model.Users) ,
        autocompleteMode: true,
        selectTemplate: function (item) {
            return item.original.key;
        }
    });

    var authorInput = document.getElementById("AuthorInput");

    tribute.attach(authorInput);

    authorInput.addEventListener("tribute-replaced", function (e) {
        document.getElementById("authorId").value = e.detail.item.original.value;
        authorInput.value = e.detail.item.original.key;
    });

    function toggleAdvancedSearch() {
        if ($("#advanced").is(":visible")) {
            $("#advanced").hide("fast", function () { });
        }
        else {
            $("#advanced").show("fast", function () { });
        }
    }
</script>