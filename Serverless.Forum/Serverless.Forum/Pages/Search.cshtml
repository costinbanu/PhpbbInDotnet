@page
@model Serverless.Forum.Pages.SearchModel
@{
    ViewData["Title"] = "Search";
    Layout = "~/Pages/_Layout.cshtml";
    var dateFormat = (await Model.GetCurrentUserAsync()).UserDateFormat;
    var IsAnonymous = Model.CurrentUserId == 1;
}

<h2>Caută</h2>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/jquery-ui/jquery-ui.js"></script>
<script type="text/javascript" src="~/js/site.js"></script>
<script type="text/javascript">
    window.onload = function () {
        onPostLoad();
    }
</script>

<form method="post">
    <input asp-for="QueryString" type="hidden" />
    <input asp-for="PageNum" type="hidden" />
    <input asp-for="TotalResults" type="hidden" />

    <input asp-for="SearchText" type="text" placeholder="Caută după text..." style="width:100%" />
    <p>&nbsp;</p>
    Caută în forumul...
    <div style="height:400px; max-height:600px; overflow-y:scroll">
        @await Html.PartialAsync(
            "_ForumTreePartial",
             new CustomPartials._ForumTreePartialModel
             {
                 Forums = await Model.GetForumTree(),
                 ForumId = Model.ForumId,
                 TopicId = Model.TopicId,
                 PathToForumOrTopic = await Model.PathToForumOrTopic(Model.ForumId, Model.TopicId)
             },
            ViewData
        )
    </div>
    <input asp-for="ForumId" type="hidden" id="ForumIdInput" />
    <p>&nbsp;</p>
    <select name="TopicId" id="TopicIdDisplay" style="width:100%">
        <option selected disabled value="-1">Caută în subiectul...</option>
        <option value="0">Caută în toate subiectele</option>
    </select>
    <p>&nbsp;</p>
    <input asp-for="Author" type="text" placeholder="Caută după autor..." id="AuthorInput" style="width:100%" />
    <p>&nbsp;</p>
    <input type="submit" value="Trimite" />
</form>

@if (Model.Posts != null && Model.Posts.Any())
{
    <h2>Rezultate</h2>
    @await  Html.PartialAsync(
        "_PaginationControlsPartial",
        new CustomPartials._PaginationControlsPartialModel(
            pagination: Model,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: false,
            topicId: null,
            lastPostId: Model.Posts.LastOrDefault()?.PostId
        ),
        ViewData
    )

    foreach (var post in Model.Posts)
    {
        <div class="ForumListRow">
            <div class="ForumListLeft" id="@post.PostId">
                <a asp-page="/ViewTopic" asp-page-handler="ByPostId" asp-route-postId="@post.PostId"><h4>@Html.Raw(post.PostSubject)</h4></a>
                <p>@Html.Raw(post.PostText)</p>
                <span style="margin-top:auto; display:inline-block">
                    @if (!string.IsNullOrWhiteSpace(post.AuthorSignature))
                    {
                        <br />
                        <span style="width:25%; display:inline-block; border-bottom:solid 1px black">&nbsp;</span>
                        <br />
                        <span class="Caption">@Html.Raw(post.AuthorSignature)</span>
                    }
                </span>
            </div>
            @await Html.PartialAsync(
                "_SummaryPartial",
                new CustomPartials._SummaryPartialModel
                {
                    AuthorId = post.AuthorId,
                    AuthorName = post.AuthorName,
                    CreationTime = post.PostCreationTime,
                    AssetId = post.PostId.Value,
                    DateFormat = dateFormat,
                    AuthorColor = post.AuthorColor,
                    ShowAvatar = post.AuthorHasAvatar
                }
            )
        </div>
    }
    <p>&nbsp;</p>
    @await  Html.PartialAsync(
        "_PaginationControlsPartial",
        new CustomPartials._PaginationControlsPartialModel(
            pagination: Model,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: true,
            topicId: null,
            lastPostId: Model.Posts.LastOrDefault()?.PostId
        ),
        ViewData
    )
}

<link rel="stylesheet" href="~/lib/tribute/dist/tribute.css" />
<script src="~/lib/tribute/dist/tribute.js"></script>
<script>
    var tribute = new Tribute({
        values: @Json.Serialize(Model.Users) ,
        autocompleteMode:true
        });

    tribute.attach(document.getElementById("AuthorInput"));
</script>