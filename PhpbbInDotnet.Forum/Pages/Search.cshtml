@page
@model PhpbbInDotnet.Forum.Pages.SearchModel

@using CustomPartials
@using Dapper
@using PhpbbInDotnet.Database.Entities
@using PhpbbInDotnet.Utilities
@using Microsoft.EntityFrameworkCore

@inject Services.WritingToolsService _writingService
@inject Database.ForumDbContext _context
@inject Services.BBCodeRenderingService _renderingService
@inject Services.UserService _userService
@inject Services.ForumTreeService _forumService


@{
    ViewData["Title"] = "Search";
    Layout = "~/Pages/_Layout.cshtml";
    var CurrentUser = await Model.GetCurrentUserAsync();
    var connection = _context.Database.GetDbConnection();
    var Lang = await Model.GetLanguage(); 
    var dateFormat = CurrentUser?.UserDateFormat ?? Model.LanguageProvider.GetDefaultDateFormat(Lang);
}
<environment include="Development">
    <link rel="stylesheet" href="~/css/pagination.css" />
    <link rel="stylesheet" href="~/css/posting.css" />
    <script type="text/javascript" src="~/js/viewTopic.js"></script>
</environment>
@if (!Model.IsAuthorSearch)
{
    <h3>@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH"])</h3>
}
<script type="text/javascript">
    var vt = new ViewTopic(-1, false, '', '', '', -1);

    $(document).ready(function () {
        window.onload = function () {
            vt.onLoad();
        }
    });

    //forum tree callback
    function forumSelectCallback(forumId) {
        var forumInput = document.getElementById("ForumIdInput");
        if (forumInput != null) {
            forumInput.value = forumId;
        }
    }

    //forum tree callback
    function topicSelectCallback(topics) {
        var topicDisplay = document.getElementById("TopicIdDisplay");
        if (topicDisplay != null) {
            topicDisplay.options.length = 0;
            var option = document.createElement('option');
            option.text = "@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_IN_ALL_TOPICS"])";
            option.value = 0;
            topicDisplay.add(option);
            topics.forEach(t => {
                var option = document.createElement('option');
                option.text = unescape(t.topicTitle);
                option.value = t.topicId;
                topicDisplay.add(option);
            });
        }
    }

    //forum tree callback
    function topicSelectInit(topicId) {
        if (topicId != null) {
            $("#TopicIdDisplay").val(topicId).change();
        }
    }
</script>
@if (!Model.IsAuthorSearch)
{
    <form method="post">
        <input asp-for="QueryString" type="hidden" />
        <input asp-for="PageNum" type="hidden" />
        <input asp-for="TotalResults" type="hidden" />
        <input asp-for="AuthorId" type="hidden" id="authorId" />

        <input asp-for="SearchText" type="text" placeholder="@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_BY_TEXT"])" style="width:100%" autofocus class="InputBox" />
        <span class="Caption">
            @Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_CAPTION"])
        </span>
        <span asp-validation-for="SearchText" class="validation"></span>
        <a href="javascript:showElement('advanced')">@Html.Raw(Model.LanguageProvider.BasicText[Lang, "ADVANCED_SEARCH"])</a>
        <div id="advanced" style="display:none">
            <p></p>
            <input asp-for="Author" type="text" placeholder="@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_BY_AUTHOR"])" id="AuthorInput" style="width:100%" autocomplete="new-password" class="InputBox" />
            <p id="tributeHolder" style="position:relative"></p>
            @Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_IN_FORUM"])
            @await Html.PartialAsync(
                 "_ForumTreePartial",
                  new _ForumTreePartialModel(
                      tree: (await Model.GetForumTree(false, false)).Tree,
                      topicData: (await connection.QueryAsync<Objects.MiniTopicDto>("SELECT * FROM phpbb_topics")).AsList(),
                      forumId: Model.ForumId,
                      topicId: Model.TopicId,
                      constrainSize: true
                  ),
                 ViewData
             )
            <input asp-for="ForumId" type="hidden" id="ForumIdInput" />
            <p></p>
            <select name="TopicId" id="TopicIdDisplay" style="width:100%">
                <option selected disabled value="-1">@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_IN_TOPIC"])</option>
                <option value="0">@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_IN_ALL_TOPICS"])</option>
            </select>
            <p></p>
        </div>
        <p></p>
        <input type="submit" value="@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SUBMIT", Casing.FirstUpper])" class="MyButton" />
    </form>
    <p>&nbsp;</p>
}
else
{
    var user = await connection.QueryFirstOrDefaultAsync<PhpbbUsers>("SELECT * FROM phpbb_users WHERE user_id = @authorId", new { Model.AuthorId });
    if (!string.IsNullOrWhiteSpace(user?.Username))
    {
        <h4>@Html.Raw(string.Format(Model.LanguageProvider.BasicText[Lang, "POSTS_BY_FORMAT"], user.Username))</h4>
    }
}
@if (Model.Posts != null && Model.Posts.Any())
{
    if (!Model.IsAuthorSearch)
    {
        <h3>@Html.Raw(Model.LanguageProvider.BasicText[Lang, "SEARCH_RESULTS"])</h3>
    }
    @await Html.PartialAsync(
        "_PaginationControlsPartial",
        new _PaginationControlsPartialModel(
            paginator: Model.Paginator,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: false,
            language: Lang,
            topicId: null,
            firstPostId: Model.Posts?.FirstOrDefault()?.PostId
        ),
        ViewData
    )
    <hr class="BoxSeparator" />
    foreach (var post in Model.Posts)
    {
        post.AuthorHasAvatar = !string.IsNullOrWhiteSpace(post.UserAvatar);
        post.Attachments = Model.Attachments?.Where(a => a.PostMsgId == post.PostId).Select(a => new Objects.AttachmentDto(a, false, Lang)).ToList();

        @await Html.PartialAsync("_PostPartial", new _PostPartialModel
        {
            CurrentUser = CurrentUser,
            Post = post,
            ForumId = Model.ForumId ?? 0,
            TopicId = Model.TopicId ?? 0,
            IsPostFirstInPage = post == Model.Posts.First(),
            IsPostLastInPage = post == Model.Posts.Last(),
            OpenPostLinkInNewTab = true,
            ToHighlight = Model.SearchText,
            Language = Lang
        }, ViewData)
    }

    <p>&nbsp;</p>
    @await Html.PartialAsync(
        "_PaginationControlsPartial",
        new _PaginationControlsPartialModel(
            paginator: Model.Paginator,
            allowPaginationChange: false,
            back: Model.GetSearchLinkForPage(Model.PageNum.Value - 1),
            forward: Model.GetSearchLinkForPage(Model.PageNum.Value + 1),
            includeEasyNavigation: true,
            language: Lang,
            topicId: null,
            firstPostId: Model.Posts?.FirstOrDefault()?.PostId
        ),
        ViewData
    )
}
else if (Model.Posts != null)
{
    <p></p>
    <p>@Html.Raw(Model.LanguageProvider.BasicText[Lang, "NO_RESULTS_FOUND"])</p>
}
<link rel="stylesheet" href="~/lib/tribute/dist/tribute.css" />
<script src="~/lib/tribute/dist/tribute.js"></script>
<script>
    var tribute = new Tribute({
        values: @Html.Raw(_writingService.ToCamelCaseJson(Model.Users)),
        selectTemplate: function (item) {
            return item.original.key;
        },
        allowSpaces: true,
        menuContainer: document.getElementById("tributeHolder"),
        positionMenu: false,
        trigger: ' '
    });

    var authorInput = document.getElementById("AuthorInput");

    tribute.attach(authorInput);

    authorInput.addEventListener("tribute-replaced", function (e) {
        document.getElementById("authorId").value = e.detail.item.original.value;
        authorInput.value = e.detail.item.original.key;
    });

    authorInput.addEventListener("focusin", function (e) {
        tribute.showMenuForCollection(authorInput);
    });
</script>
