@page
@model PhpbbInDotnet.Forum.Pages.MemberListModel

@using PhpbbInDotnet.Utilities
@using System.Web
@using Microsoft.Extensions.Configuration
@using CustomPartials

@inject CommonUtils _utils
@inject Services.BBCodeRenderingService _renderingService
@inject IConfiguration _config
@inject AnonymousSessionCounter _sessionCounter

@{
    ViewData["Title"] = "MemberList";
    Layout = "~/Pages/_Layout.cshtml";
    var user = await Model.GetCurrentUserAsync();
    var dateFormat = user.UserDateFormat;
    if (!DateTime.TryParse(DateTime.Now.ToString(dateFormat), out _))
    {
        dateFormat = "dddd, dd.MM.yyyy, HH:mm";
    }
    var Lang = await Model.GetLanguage();
}

<environment include="Development">
    <link rel="stylesheet" href="~/css/pagination.css" />
    <script src="~/js/tabbedPage.js"></script>
    <link rel="stylesheet" href="~/css/tabbedPage.css" />
</environment>

<script>
    function setMode(value) {
        $('#modeInput').val(value);
        $('#modeForm').submit();
    }
</script>

<form method="get" id="modeForm">
    <input type="hidden" asp-for="Mode" id="modeInput" />
    <input type="hidden" name="handler" value="setMode" />
</form>

<div class="tab">
    <button class="@(Model.Mode == MemberListPages.AllUsers ? "tablinks active" : "tablinks")" onclick="setMode('AllUsers')">
        @Model.LanguageProvider.BasicText[Lang, "ALL_USERS", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.ActiveUsers || Model.Mode == MemberListPages.ActiveBots ? "tablinks active" : "tablinks")" onclick="setMode('ActiveUsers')">
        @Model.LanguageProvider.BasicText[Lang, "ACTIVE_USERS", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.SearchUsers ? "tablinks active" : "tablinks")" onclick="setMode('SearchUsers')">
        @Model.LanguageProvider.BasicText[Lang, "SEARCH_FOR_USER", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.Groups ? "tablinks active" : "tablinks")" onclick="setMode('Groups')">
        @Model.LanguageProvider.BasicText[Lang, "FORUM_GROUPS", Casing.Title]
    </button>
</div>

<div id="AllUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.AllUsers ? "display:inherit" : "display:none")">
    <h3>@Model.LanguageProvider.BasicText[Lang, "FORUM_MEMBERS", Casing.Title]</h3>
    <form method="get">
        @Html.DropDownListFor(m => m.Order, _utils.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.LanguageProvider.Enums[Lang, order], defaultText: Model.LanguageProvider.BasicText[Lang, "ORDER_BY"]), new { id = "userOrder", style = "height:30px; margin-top: 5px" })
        <input asp-for="Mode" type="hidden" />
        <input asp-for="PageNum" type="hidden" />
        <input type="submit" value="Trimite" style="height:32px; margin-top: 5px" />
    </form>
    @if (Model.UserList?.Any() ?? false)
    {
        @await Html.PartialAsync(
           "_UserSummaryPartial",
           new _UserSummaryPartialModel(
               userList: Model.UserList, groupList: Model.GroupList, rankList: Model.RankList, dateFormat: dateFormat, language: Lang,
               paginator: Model.Paginator, backLink: $"MemberList?pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.AllUsers}", forwardLink: $"MemberList?pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.AllUsers}"
           )
       );
    }
    else
    {
        <h4>@Model.LanguageProvider.BasicText[Lang, "NO_USERS", Casing.Title]</h4>
    }

</div>

<div id="SearchUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.SearchUsers ? "display:inherit" : "display:none")">
    @if (!(Model.UserList?.Any() ?? false))
    {
        <h3>@Model.LanguageProvider.BasicText[Lang, "SEARCH_FOR_USER", Casing.Title]</h3>
    }
    else
    {
        <h3>@Model.LanguageProvider.BasicText[Lang, "SEARCH_RESULTS", Casing.Title]</h3>
    }
    <form method="get">
        <input type="hidden" name="handler" value="search" />
        <input asp-for="Username" placeholder="@Model.LanguageProvider.BasicText[Lang, "SEARCH_BY_NAME"]" style="height:30px; margin-top: 5px" id="usernameUserInput" />
        @{
            var items = Model.GroupList.Select(g => new SelectListItem(g.GroupName, g.GroupId.ToString(), g.GroupId == Model.GroupId, false)).ToList();
            items.Add(new SelectListItem(Model.LanguageProvider.BasicText[Lang, "SEARCH_IN_GROUP"], "null", !Model.GroupId.HasValue, true));
            @Html.DropDownListFor(m => m.GroupId, items, new { id = "searchGroup", style = "height:30px; margin-top: 5px" });
        }
        @Html.DropDownListFor(m => m.Order, _utils.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.LanguageProvider.Enums[Lang, order], defaultText: Model.LanguageProvider.BasicText[Lang, "ORDER_BY"]), new { id = "searchOrder", style = "height:30px; margin-top: 5px" })
        <input asp-for="Mode" type="hidden" />
        <input asp-for="PageNum" type="hidden" id="pageNumInput" />
        <input type="hidden" value="@Model.Username" id="usernameOriginalValue" />
        <input type="submit" value="@Model.LanguageProvider.BasicText[Lang, "SUBMIT", Casing.FirstUpper]" style="height:32px; margin-top: 5px" onclick="return shouldChangePageNum()" />
    </form>

    @if (Model.UserList?.Any() ?? false)
    {
        @await Html.PartialAsync(
          "_UserSummaryPartial",
          new _UserSummaryPartialModel(
              userList: Model.UserList, groupList: Model.GroupList, rankList: Model.RankList, dateFormat: dateFormat, language: Lang,
              paginator: Model.Paginator, backLink: $"MemberList?pageNum={Model.PageNum - 1}&order={Model.Order}&handler=search&username={HttpUtility.UrlEncode(Model.Username)}&groupId={Model.GroupId}", forwardLink: $"MemberList?pageNum={Model.PageNum + 1}&order={Model.Order}&handler=search&username={HttpUtility.UrlEncode(Model.Username)}&groupId={Model.GroupId}"
          )
      )
    }
    else if (Model.SearchWasPerformed)
    {
        <h4>@Model.LanguageProvider.BasicText[Lang, "NO_USERS"]</h4>
    }

</div>

<div id="Groups" class="tabcontent" style="@(Model.Mode == MemberListPages.Groups ? "display:inherit" : "display:none")">
    <h3>@Model.LanguageProvider.BasicText[Lang, "FORUM_GROUPS", Casing.Title]</h3>
    @{
        if (await Model.IsCurrentUserAdminHere())
        {
            <span asp-validation-for="ValidationDummy" class="validation"></span>
        }

        var isFirst = true;
        foreach (var group in Model.GroupList ?? Enumerable.Empty<PhpbbInDotnet.Database.Entities.PhpbbGroups>())
        {
            if (!isFirst)
            {
                <hr class="BoxSeparator" />
            }

            var color = string.IsNullOrWhiteSpace(group.GroupColour) || group.GroupColour == "000000" ? "auto" : $"#{group.GroupColour}";

            <div class="FlexCenter">
                <div class="PostTitle ThemeColor" style="overflow-wrap: break-word; color:@color">
                    @Html.Raw(group.GroupName)
                </div>
                <div class="FlexRight PostInputWidth">
                    @if (!string.IsNullOrWhiteSpace(group.GroupDesc))
                    {
                        <p>
                            @Html.Raw(_renderingService.BbCodeToHtml(group.GroupDesc, group.GroupDescUid))
                        </p>
                    }
                    <a asp-page="/MemberList" asp-page-handler="search" asp-route-GroupId="@group.GroupId" asp-route-Mode="SearchUsers" asp-route-PageNum="1">
                        @Model.LanguageProvider.BasicText[Lang, "SEE_ALL_GROUP_MEMBERS", Casing.Title]
                    </a>
                </div>
            </div>
            isFirst = false;
        }
    }
</div>

<div id="ActiveUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.ActiveUsers || Model.Mode == MemberListPages.ActiveBots ? "display:inherit" : "display:none")">
    <h3>
        @string.Format(Model.LanguageProvider.BasicText[Lang, "MEMBERLIST_STATS_HEADER_FORMAT", Casing.Title], _config.GetValue<int?>("UserActivityTrackingIntervalMinutes") ?? 60)
    </h3>
    @if (Model.Mode == MemberListPages.ActiveUsers)
    {
        <form method="get">
            @Html.DropDownListFor(m => m.Order, _utils.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.LanguageProvider.Enums[Lang, order], defaultText: Model.LanguageProvider.BasicText[Lang, "ORDER_BY"]), new { id = "userOrder", style = "height:30px; margin-top: 5px" })
            <input asp-for="Mode" type="hidden" />
            <input asp-for="PageNum" type="hidden" />
            <input name="handler" value="setMode" type="hidden" />
            <input type="submit" value="Trimite" style="height:32px; margin-top: 5px" />
        </form>
    }
    @{
        var registered = @Model.Paginator?.Pagination?.Pager?.TotalItems ?? 0;
        var anonymous = _sessionCounter.GetActiveSessionCount();
        var bots = _sessionCounter.GetActiveBotCount();
        var displayUsers = Model.Mode == MemberListPages.ActiveBots ? "display:none" : "display:initial";
        var displayBots = Model.Mode == MemberListPages.ActiveBots ? "display:initial" : "display:none";
    }
<h4>
    @string.Format(Model.LanguageProvider.BasicText[Lang, registered == 1 ? "REGISTERED_COUNT_SINGLE_FORMAT" : "REGISTERED_COUNT_MULTIPLE_FORMAT", Casing.Title], registered),
    @string.Format(Model.LanguageProvider.BasicText[Lang, anonymous == 1 ? "GUEST_COUNT_SINGLE_FORMAT" : "GUEST_COUNT_MULTIPLE_FORMAT", Casing.Title], anonymous)
    @if (await Model.IsCurrentUserAdminHere())
    {
        <span>
            @Model.LanguageProvider.BasicText[Lang, "AND"]
            @if (bots > 0)
            {
                <a href="@($"MemberList?handler=setMode&pageNum={Model.PageNum}&order={Model.Order}&mode={MemberListPages.ActiveBots}")">
                    @string.Format(Model.LanguageProvider.BasicText[Lang, bots == 1 ? "BOT_COUNT_SINGLE_FORMAT" : "BOT_COUNT_MULTIPLE_FORMAT", Casing.Title], bots)
                </a>
            }
            else
            {
                @string.Format(Model.LanguageProvider.BasicText[Lang, "BOT_COUNT_MULTIPLE_FORMAT", Casing.Title], bots)
            }
        </span>
    }

</h4>
    <div id="users" style="@displayUsers">
        @if (Model.UserList?.Any() ?? false)
        {
            @await Html.PartialAsync(
                    "_UserSummaryPartial",
                    new _UserSummaryPartialModel(
                        userList: Model.UserList, groupList: Model.GroupList, rankList: Model.RankList, dateFormat: dateFormat, language: Lang, paginator: Model.Paginator,
                        backLink: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveUsers}",
                        forwardLink: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveUsers}"
                    )
                );
        }
        else
        {
            <h4>@Model.LanguageProvider.BasicText[Lang, "NO_USERS"]</h4>
        }
    </div>
    <div id="bots" style="@displayBots">
        <p>&nbsp;</p>
        @{
            var botList = _sessionCounter.GetBots().OrderByDescending(x => x.EntryTime).Skip(MemberListModel.PAGE_SIZE * (Model.PageNum - 1)).Take(MemberListModel.PAGE_SIZE);
            var paginator = new Paginator(bots, Model.PageNum, $"/MemberList?handler=setMode&mode={Model.Mode}", MemberListModel.PAGE_SIZE, "pageNum");
            @await Html.PartialAsync(
                "_PaginationControlsPartial",
                new _PaginationControlsPartialModel(
                    paginator: paginator, allowPaginationChange: false, includeEasyNavigation: false, language: Lang,
                    back: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}",
                    forward: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}"

                )
            );
            isFirst = true;
            foreach (var bot in botList)
            {
                if (!isFirst)
                {
                    <hr class="BoxSeparator" />
                }
                <div class="FlexCenter">
                    <div class="PostTitle" style="overflow-wrap: break-word">
                        @Html.Raw(bot.IP)
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (await Model.IsCurrentUserAdminHere())
                        {
                            <a href="https://whatismyipaddress.com/ip/@bot.IP" target="_blank">[IP Lookup]</a><br />
                        }
                        @Html.Raw(bot.UserAgent) <br />
                        @Model.LanguageProvider.BasicText[Lang, "LAST_ACTIVE"]:
                        <script>
                            writeDate('@bot.EntryTime.ToString("o")', '@dateFormat');
                        </script>
                    </div>
                </div>
                isFirst = false;
            }

            @await Html.PartialAsync(
                "_PaginationControlsPartial",
                new _PaginationControlsPartialModel(
                    paginator: paginator, allowPaginationChange: false, includeEasyNavigation: true, language: Lang,
                    back: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}",
                    forward: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}"

                )
            )
        }
    </div>
</div>

@if (!Model.Order.HasValue)
{
    <script>
        $(document).ready(function () {
            $('#userOrder').val('dummyValue');
            $('#searchOrder').val('dummyValue');
        });
    </script>
}

@if (!Model.GroupId.HasValue)
{
    <script>
        $(document).ready(function () {
            $('#searchGroup').val('null');
        });
    </script>
}

<script>
    function shouldChangePageNum() {
        if ($('#usernameUserInput').val().toLowerCase() != $('#usernameOriginalValue').val().toLowerCase()) {
            $('#pageNumInput').val('1');
        }
        return true;
    }
</script>
