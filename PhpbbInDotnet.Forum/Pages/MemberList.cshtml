@page
@model PhpbbInDotnet.Forum.Pages.MemberListModel

@using Domain
@using Domain.Utilities
@using Domain.Extensions
@using Services
@using System.Web
@using Microsoft.Extensions.Configuration
@using CustomPartials

@inject IBBCodeRenderingService _renderingService
@inject IConfiguration _config
@inject IAnonymousSessionCounter _sessionCounter

@{
    var Lang = Model.Language;
    ViewData["Title"] = Model.TranslationProvider.BasicText[Lang, "MEMBERLIST"];
    Layout = "~/Pages/_Layout.cshtml";
    var user = Model.ForumUser;
    var dateFormat = user.UserDateFormat ?? Model.TranslationProvider.GetDefaultDateFormat(Lang);
}

@await Html.PartialAsync("_HeaderLinksPartial", new _HeaderLinksPartialModel(Lang, user.IsAnonymous), ViewData)
<p></p>
<environment include="Development">
    <link rel="stylesheet" href="~/css/pagination.css" />
    <script src="~/js/tabbedPage.js"></script>
	<link rel="stylesheet" href="~/css/tabbedPage.css" />
</environment>

<form method="get" id="modeForm">
    <input type="hidden" asp-for="Mode" id="modeInput" />
    <input type="hidden" name="handler" value="setMode" />
</form>

<div class="tab">
    <button class="@(Model.Mode == MemberListPages.AllUsers ? "tablinks active" : "tablinks")" onclick="setMode('modeInput', 'modeForm', 'AllUsers')">
        @Model.TranslationProvider.BasicText[Lang, "ALL_USERS", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.ActiveUsers || Model.Mode == MemberListPages.ActiveBots ? "tablinks active" : "tablinks")" onclick="setMode('modeInput', 'modeForm', 'ActiveUsers')">
        @Model.TranslationProvider.BasicText[Lang, "ACTIVE_USERS", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.SearchUsers ? "tablinks active" : "tablinks")" onclick="setMode('modeInput', 'modeForm', 'SearchUsers')">
        @Model.TranslationProvider.BasicText[Lang, "SEARCH_FOR_USER", Casing.Title]
    </button>
    <button class="@(Model.Mode == MemberListPages.Groups ? "tablinks active" : "tablinks")" onclick="setMode('modeInput', 'modeForm', 'Groups')">
        @Model.TranslationProvider.BasicText[Lang, "FORUM_GROUPS", Casing.Title]
    </button>
</div>

<div id="AllUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.AllUsers ? "display:inherit" : "display:none")">
    <h3>@Model.TranslationProvider.BasicText[Lang, "FORUM_MEMBERS", Casing.Title]</h3>
    <form method="get">
        @Html.DropDownListFor(m => m.Order, EnumUtility.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.TranslationProvider.Enums[Lang, order], defaultText: Model.TranslationProvider.BasicText[Lang, "ORDER_BY"]), new { id = "userOrder", style = "margin-top: 5px" })
        <input asp-for="Mode" type="hidden" />
        <input asp-for="PageNum" type="hidden" />
        <input type="submit" value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SUBMIT", Casing.FirstUpper])" style="margin-top: 5px" />
    </form>
    @if (Model.UserList?.Any() ?? false)
    {
        @await Html.PartialAsync(
           "_UserSummaryPartial",
           new _UserSummaryPartialModel(
               userList: Model.UserList, groupList: Model.GroupList!, rankList: Model.RankList!, dateFormat: dateFormat, language: Lang,
               paginator: Model.Paginator!, backLink: $"MemberList?pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.AllUsers}", forwardLink: $"MemberList?pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.AllUsers}"
           )
       );
    }
    else
    {
        <h4>@Model.TranslationProvider.BasicText[Lang, "NO_USERS", Casing.Title]</h4>
    }

</div>

<div id="SearchUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.SearchUsers ? "display:inherit" : "display:none")">
    @if (!(Model.UserList?.Any() ?? false))
    {
        <h3>@Model.TranslationProvider.BasicText[Lang, "SEARCH_FOR_USER", Casing.Title]</h3>
    }
    else
    {
        <h3>@Model.TranslationProvider.BasicText[Lang, "SEARCH_RESULTS", Casing.Title]</h3>
    }
    <form method="get">
        <input type="hidden" name="handler" value="search" />
        <input asp-for="Username" placeholder="@Model.TranslationProvider.BasicText[Lang, "SEARCH_BY_NAME"]" style="margin-top: 5px" id="usernameUserInput" autocomplete="new-password" />
        @{
            var items = Model.GroupList!.Select(g => new SelectListItem(g.GroupName, g.GroupId.ToString(), g.GroupId == Model.GroupId, false)).ToList();
            items.Add(new SelectListItem(Model.TranslationProvider.BasicText[Lang, "SEARCH_IN_GROUP"], "null", !Model.GroupId.HasValue, true));
            @Html.DropDownListFor(m => m.GroupId, items, new { id = "searchGroup", style = "margin-top: 5px" });
        }
        @Html.DropDownListFor(m => m.Order, EnumUtility.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.TranslationProvider.Enums[Lang, order], defaultText: Model.TranslationProvider.BasicText[Lang, "ORDER_BY"]), new { id = "searchOrder", style = "margin-top: 5px" })
        <input asp-for="Mode" type="hidden" />
        <input asp-for="PageNum" type="hidden" id="pageNumInput" />
        <input type="hidden" value="@Model.Username" id="usernameOriginalValue" />
        <input type="submit" value="@Model.TranslationProvider.BasicText[Lang, "SUBMIT", Casing.FirstUpper]" style="margin-top: 5px" onclick="return shouldChangePageNum()" />
    </form>

    @if (Model.UserList?.Any() ?? false)
    {
        @await Html.PartialAsync(
          "_UserSummaryPartial",
          new _UserSummaryPartialModel(
              userList: Model.UserList, groupList: Model.GroupList!, rankList: Model.RankList!, dateFormat: dateFormat, language: Lang,
              paginator: Model.Paginator!, backLink: $"MemberList?pageNum={Model.PageNum - 1}&order={Model.Order}&handler=search&username={HttpUtility.UrlEncode(Model.Username)}&groupId={Model.GroupId}", forwardLink: $"MemberList?pageNum={Model.PageNum + 1}&order={Model.Order}&handler=search&username={HttpUtility.UrlEncode(Model.Username)}&groupId={Model.GroupId}"
          )
      )
    }
    else if (Model.SearchWasPerformed)
    {
        <h4>@Model.TranslationProvider.BasicText[Lang, "NO_USERS"]</h4>
    }

</div>

<div id="Groups" class="tabcontent" style="@(Model.Mode == MemberListPages.Groups ? "display:inherit" : "display:none")">
    <h3>@Model.TranslationProvider.BasicText[Lang, "FORUM_GROUPS", Casing.Title]</h3>
    @{
        if (Model.CurrentUserIsAdmin)
        {
            <span asp-validation-for="ValidationDummy" class="validation"></span>
        }

        foreach (var (group, index) in (Model.GroupList ?? Enumerable.Empty<PhpbbInDotnet.Database.Entities.PhpbbGroups>()).Indexed())
        {
            if (index > 0)
            {
                <hr class="BoxSeparator" />
            }

            var color = string.IsNullOrWhiteSpace(group.GroupColour) || group.GroupColour == Constants.DEFAULT_USER_COLOR ? "auto" : $"#{group.GroupColour}";

            <div class="FlexCenter">
                <div class="PostTitle ThemeColor" style="overflow-wrap: break-word; color:@color">
                    @Html.Raw(group.GroupName)
                </div>
                <div class="FlexRight PostInputWidth">
                    @if (!string.IsNullOrWhiteSpace(group.GroupDesc))
                    {
                        <p>
                            @Html.Raw(_renderingService.BbCodeToHtml(group.GroupDesc, group.GroupDescUid))
                        </p>
                    }
                    <a asp-page="/MemberList" asp-page-handler="search" asp-route-GroupId="@group.GroupId" asp-route-Mode="SearchUsers" asp-route-PageNum="1">
                        @Model.TranslationProvider.BasicText[Lang, "SEE_ALL_GROUP_MEMBERS", Casing.Title]
                    </a>
                </div>
            </div>
        }
    }
</div>

<div id="ActiveUsers" class="tabcontent" style="@(Model.Mode == MemberListPages.ActiveUsers || Model.Mode == MemberListPages.ActiveBots ? "display:inherit" : "display:none")">
    <h3>
        @string.Format(Model.TranslationProvider.BasicText[Lang, "MEMBERLIST_STATS_HEADER_FORMAT", Casing.Title], (int)(_config.GetValue<TimeSpan?>("UserActivityTrackingInterval") ?? TimeSpan.FromHours(1)).TotalMinutes)
    </h3>
    @if (Model.Mode == MemberListPages.ActiveUsers)
    {
        <form method="get">
            @Html.DropDownListFor(m => m.Order, EnumUtility.EnumToDropDownList<MemberListOrder>(selectedItem: Model.Order, textTransform: order => Model.TranslationProvider.Enums[Lang, order], defaultText: Model.TranslationProvider.BasicText[Lang, "ORDER_BY"]), new { id = "userOrder", style = "margin-top: 5px" })
            <input asp-for="Mode" type="hidden" />
            <input asp-for="PageNum" type="hidden" />
            <input name="handler" value="setMode" type="hidden" />
            <input type="submit" value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SUBMIT", Casing.FirstUpper])" style="margin-top: 5px" />
        </form>
    }
    @{
        var anonymousUserCount = _sessionCounter.GetActiveSessionCount();
        var botCount = _sessionCounter.GetTotalActiveBotCount();
        var displayUsers = Model.Mode == MemberListPages.ActiveBots ? "display:none" : "display:initial";
        var displayBots = Model.Mode == MemberListPages.ActiveBots ? "display:initial" : "display:none";
    }
    <h4>
        @string.Format(Model.TranslationProvider.BasicText[Lang, Model.RegisteredUserCount == 1 ? "REGISTERED_COUNT_SINGLE_FORMAT" : "REGISTERED_COUNT_MULTIPLE_FORMAT", Casing.Title], Model.RegisteredUserCount),
        @string.Format(Model.TranslationProvider.BasicText[Lang, anonymousUserCount == 1 ? "GUEST_COUNT_SINGLE_FORMAT" : "GUEST_COUNT_MULTIPLE_FORMAT", Casing.Title], anonymousUserCount)
        @if (Model.CurrentUserIsAdmin)
        {
            <span>
                @Model.TranslationProvider.BasicText[Lang, "AND"]
                @if (botCount > 0)
                {
                    <a href="@($"MemberList?handler=setMode&pageNum={Model.PageNum}&order={Model.Order}&mode={MemberListPages.ActiveBots}")">
                        @string.Format(Model.TranslationProvider.BasicText[Lang, botCount == 1 ? "BOT_COUNT_SINGLE_FORMAT" : "BOT_COUNT_MULTIPLE_FORMAT", Casing.Title], botCount)
                    </a>
                }
                else
                {
                    @string.Format(Model.TranslationProvider.BasicText[Lang, "BOT_COUNT_MULTIPLE_FORMAT", Casing.Title], botCount)
                }
            </span>
        }

    </h4>
    <div id="users" style="@displayUsers">
        @if (Model.UserList?.Any() ?? false)
        {
            @await Html.PartialAsync(
                    "_UserSummaryPartial",
                    new _UserSummaryPartialModel(
                        userList: Model.UserList, groupList: Model.GroupList!, rankList: Model.RankList!, dateFormat: dateFormat, language: Lang, paginator: Model.Paginator!,
                        backLink: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveUsers}",
                        forwardLink: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveUsers}"
                    )
                );
        }
        else
        {
            <h4>@Model.TranslationProvider.BasicText[Lang, "NO_USERS"]</h4>
        }
    </div>
    <div id="bots" style="@displayBots">
        <p>&nbsp;</p>
        @if (Model.BotList?.Any() == true) 
        {
            @await Html.PartialAsync(
                "_PaginationControlsPartial",
                new _PaginationControlsPartialModel(
                    paginator: Model.BotPaginator!, allowPaginationChange: false, includeEasyNavigation: false, language: Lang,
                    back: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}",
                    forward: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}"));
            <p>&nbsp;</p>
            foreach (var (botGroup, index) in Model.BotList.Indexed())
            {
                if (index > 0)
                {
                    <hr class="BoxSeparator" />
                }
                <button type="button" class="collapsible">
					@Html.Raw(botGroup.Key) (@botGroup.Count())
                </button>

                <div class="content">
                    <a href="javascript:copyUserAgent('@Html.Raw(botGroup.Key)')">
                        @Model.TranslationProvider.Admin[Lang, "COPY_USER_AGENT"]
                    </a>
                    <p></p>
                    @foreach (var bots in botGroup.GroupBy(x => x.IP))
                    {
                        <p>
                            @Html.Raw(bots.Key)
                            <a href="https://whatismyipaddress.com/ip/@bots.Key" target="_blank">[IP Lookup]</a>
                            (@bots.Count())
                            <br />
                            @Model.TranslationProvider.BasicText[Lang, "LAST_ACTIVE"]
                            <formatted-date date="@bots.Max(x => x.EntryTime).ToString("o")" format="@dateFormat" />
                        </p>
                    }
                    <div style="width:100%; text-align:right; font-size:1.5em">
                        <a href="#botTitle">&#x23EB;</a>
                    </div>
                </div>
            }
            <p>&nbsp;</p>
            @await Html.PartialAsync(
                "_PaginationControlsPartial",
                new _PaginationControlsPartialModel(
                    paginator: Model.BotPaginator!, allowPaginationChange: false, includeEasyNavigation: true, language: Lang,
                    back: $"MemberList?handler=setMode&pageNum={Model.PageNum - 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}",
                    forward: $"MemberList?handler=setMode&pageNum={Model.PageNum + 1}&order={Model.Order}&mode={MemberListPages.ActiveBots}"))
        }
    </div>
</div>

@if (!Model.Order.HasValue)
{
    <script>
        $(window).on('load', function () {
            $('#userOrder').val('dummyValue');
            $('#searchOrder').val('dummyValue');
        });
    </script>
}

@if (!Model.GroupId.HasValue)
{
    <script>
        $(window).on('load', function () {
            $('#searchGroup').val('null');
        });
    </script>
}

<script>
    function shouldChangePageNum() {
        if ($('#usernameUserInput').val().toLowerCase() != $('#usernameOriginalValue').val().toLowerCase()) {
            $('#pageNumInput').val('1');
        }
        return true;
    }

    function copyUserAgent(value) {
        var $temp = $("<input>");
        $("body").append($temp);
        $temp.val(value).select();
        document.execCommand("copy");
        $temp.remove();
    }

    enableCollapsibles();
</script>
