@page
@using PhpbbInDotnet.Forum.Utilities

@model PhpbbInDotnet.Forum.Pages.UserModel
@{
    ViewData["Title"] = "User";
    Layout = "~/Pages/_Layout.cshtml";
    var isSelf = (await Model.GetCurrentUserAsync()).UserId == Model.CurrentUser.UserId;
}

@inject Services.UserService _userService

<environment include="Development">
    <link rel="stylesheet" href="~/css/posting.css" />
</environment>
<style>
    @@media (max-width: 768px) {
        .FlexRight {
            text-align: center;
            padding-left: 0px;
        }
    }
</style>
<h2>Panoul utilizatorului</h2>
<hr />
<h4>
    @Model.CurrentUser.Username - Profil
</h4>
@if (await Model.CanEditAsync())
{
    <a href="?userId=@(Model.CurrentUser.UserId)&viewAsAnother=true">Vezi profilul ca alt utilizator</a>
}
else if (Model.ViewAsAnother)
{
    <a href="?userId=@(Model.CurrentUser.UserId)&viewAsAnother=false">Vezi profilul ca tine însuți</a>
}

<form method="post">
    <div class="FlexCenter">
        @if (!string.IsNullOrWhiteSpace(Model.CurrentUser.UserAvatar))
        {
            <img src="./File?userId=@Model.CurrentUser.UserId&handler=avatar" />
        }
    </div>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Nume utilizator
        </div>
        <div class="FlexRight PostInputWidth">
            @if (!Model.ViewAsAnother && await Model.IsCurrentUserAdminHere())
            {
                <input asp-for="CurrentUser.Username" />
            }
            else
            {
                <span style="font-weight:bold; color:#@(string.IsNullOrWhiteSpace(Model.CurrentUser.UserColour) ? "000000" : Model.CurrentUser.UserColour)">
                    @Html.Raw(Model.CurrentUser.Username)
                </span>
                @if (isSelf)
                {
                    <br />
                    <span class="Caption">Trimite un e-mail la <a href="mailto:admin@metrouusor.com">admin@metrouusor.com</a> dacă dorești schimbarea numelui de utilizator.</span>
                }
            }
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        @if (await Model.CanEditAsync())
        {
            <div style="font-weight:bold; text-align: right">
                Data nașterii
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="Birthday" /><br />
                <span class="Caption">Dacă este completată, se va afișa doar vârsta.<br />Completează cu data în format ZZ.LL.AAAA sau ZZ-LL-AAAA sau lasă necompletat pentru a nu afișa vârsta. </span><br />
                <span asp-validation-for="Birthday" class="validation"></span>
            </div>
        }
        else if (DateTime.TryParse(Model.CurrentUser.UserBirthday, out var birthday))
        {
            <div style="font-weight:bold; text-align: right">
                Vârsta
            </div>
            <div class="FlexRight PostInputWidth">
                @((int)(DateTime.UtcNow.Subtract(birthday).TotalDays / 365.25)) ani
            </div>
        }
    </div>
    @if (!Model.ViewAsAnother && isSelf)
    {
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Parola
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="FirstPassword" type="password" /><br />
                <span class="Caption">Lasă necompletat dacă nu dorești să o modifici.</span>
            </div>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Repetă parola
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="SecondPassword" type="password" /><span asp-validation-for="SecondPassword" class="validation"></span>
            </div>
        </div>
    }
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Prezentare
        </div>
        <div class="FlexRight PostInputWidth">
            @if (await Model.CanEditAsync())
            {
                <input asp-for="CurrentUser.UserOcc" />
            }
            else
            {
                @Html.Raw(Model.CurrentUser.UserOcc)
            }
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Interese
        </div>
        <div class="FlexRight PostInputWidth">
            @if (await Model.CanEditAsync())
            {
                <input asp-for="CurrentUser.UserInterests" />
            }
            else
            {
                @Html.Raw(Model.CurrentUser.UserInterests)
            }
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Localitate
        </div>
        <div class="FlexRight PostInputWidth">
            @if (await Model.CanEditAsync())
            {
                <input asp-for="CurrentUser.UserFrom" />
            }
            else
            {
                @Html.Raw(Model.CurrentUser.UserFrom)
            }
        </div>
    </div>
    @if (await Model.CanEditAsync())
    {
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Formatul datelor afișate
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="CurrentUser.UserDateformat" />
                <br /><span class="Caption">Exemplu: dd.MM.yyyy HH:mm va afișa data "@DateTime.Now.ToString("dd.MM.yyyy HH:mm")"</span>
            </div>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Avatar
            </div>
            <div class="FlexRight PostInputWidth">
                @if (!string.IsNullOrWhiteSpace(Model.CurrentUser.UserAvatar))
                {
                    <img src="./File?userId=@Model.CurrentUser.UserId&handler=avatar" /><br />
                    @Html.Raw(Model.CurrentUser.UserAvatar)<br />
                    <input asp-for="DeleteAvatar" style="width:auto" /> <span>Șterge acest avatar?</span><br />
                    <span class="Caption">Bifează pentru a șterge avatarul curent.</span><br /><br />
                }
                <input asp-for="Avatar" />
                <span class="Caption">Sunt permise imagini cu dimensiunea maximă 200 px / 200 px.</span><br />
                <span asp-validation-for="Avatar" class="validation"></span>
            </div>
        </div>
    }
    @if (!Model.ViewAsAnother && await Model.IsCurrentUserAdminHere())
    {
        var permissions = new List<SelectListItem>(
            (await _userService.GetUserRolesLazy()).Select(
                p => new SelectListItem(p.RoleDescription, p.RoleId.ToString(), p.RoleId == Model.AclRole)
            )
        );
        permissions.Add(new SelectListItem("Nici un rol atribuit", "-1", !permissions.Any(p => p.Selected)));

        var ranks = new List<SelectListItem>(
            (await _userService.GetRankListAsync()).Select(
                r => new SelectListItem(r.RankTitle, r.RankId.ToString(), r.RankId == Model.CurrentUser.UserRank)
            )
        );
        ranks.Add(new SelectListItem("Nici un rang atribuit", "0", !ranks.Any(p => p.Selected)));

        var groups = new List<SelectListItem>(
            (await _userService.GetGroupListAsync()).Select(
                g => new SelectListItem(g.GroupName, g.GroupId.ToString(), g.GroupId == Model.GroupId)
            )
        );
        <hr />
        <div class="FlexCenter">
            <h4>Administrează cont</h4>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Timpul cât este permisă<br />editarea mesajelor proprii:
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="CurrentUser.UserEditTime" /><br />
                <span class="Caption">
                    Minute de la publicarea mesajului.<br />
                    Aceeași setare există și la grupuri și se aplică valoarea cea mai restrictivă diferită de zero.<br />
                    Zero semnifică „timp nelimitat” și se aplică chiar dacă cealaltă setare este diferită de zero.
                </span><br />
            </div>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Permisiunile utilizatorului
            </div>
            <div class="FlexRight PostInputWidth">
                @Html.DropDownListFor(m => m.AclRole, permissions, new { style = "width:300px", autocomplete = "off" })
            </div>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Rangul utilizatorului
            </div>
            <div class="FlexRight PostInputWidth">
                @Html.DropDownListFor(m => m.UserRank, ranks, new { style = "width:300px", autocomplete = "off" })
            </div>
        </div>
        <p></p>
        <div class="FlexCenter">
            <div style="font-weight:bold; text-align: right">
                Grupul utilizatorului
            </div>
            <div class="FlexRight PostInputWidth">
                @Html.DropDownListFor(m => m.GroupId, groups, new { style = "width:300px", autocomplete = "off" })
            </div>
        </div>
    }
    <hr />
    <div class="FlexCenter">
        <h4>Contact</h4>
    </div>
    <div class="FlexCenter">
        @if (await Model.CanEditAsync())
        {
            <div style="font-weight:bold; text-align: right">
                E-mail
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="Email" /><br />
                <span class="Caption">Dacă modifici acest câmp, contul va deveni inactiv. Vei primi pe noua adresă de e-mail un mesaj cu instrucțiuni pentru reactivare.</span><br />
                <span asp-validation-for="Email" class="validation"></span><br />
                <input asp-for="ShowEmail" style="width:auto" /> Arată adresa de e-mail în profil (astfel membrii forumului te pot contacta prin e-mail).
            </div>
        }
        else if (Model.CurrentUser.UserAllowViewemail == 1 || await Model.IsCurrentUserAdminHere())
        {

            <a href="mailto:@Html.Raw(Model.CurrentUser.UserEmail)">Trimite e-mail</a>
        }
    </div>
    @if (await Model.CanEditAsync())
    {
        <div class="FlexCenter">
            <a href="mailto:@Html.Raw(Model.CurrentUser.UserEmail)">Trimite e-mail</a>
        </div>
    }
    @if (!isSelf && _userService.HasPrivateMessages(await Model.GetCurrentUserAsync()) && await _userService.HasPrivateMessages(Model.CurrentUser.UserId))
    {
        <p></p>
        <div class="FlexCenter">
            <a asp-page="/Posting" asp-page-handler="PrivateMessage" asp-route-receiverId="@Model.CurrentUser.UserId">Trimite mesaj privat</a>
        </div>
    }
    <p></p>
    <div class="FlexCenter">
        @if (await Model.CanEditAsync())
        {
            <div style="font-weight:bold; text-align: right">
                Website
            </div>
            <div class="FlexRight PostInputWidth">
                <input asp-for="CurrentUser.UserWebsite" />
            </div>
        }
        else if (!string.IsNullOrEmpty(Model.CurrentUser.UserWebsite))
        {
            <a href="@Html.Raw(Model.CurrentUser.UserWebsite)" target="_blank">Vizitează website</a>
        }
    </div>
    <hr />
    <div class="FlexCenter">
        <h4>Statistici</h4>
    </div>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Membru din
        </div>
        <div class="FlexRight PostInputWidth">
            @{
                var UserDateFormat = (await Model.GetCurrentUserAsync())?.UserDateFormat ?? "dddd, dd.MM.yyyy, HH:mm";
                if (!DateTime.TryParse(DateTime.Now.ToString(UserDateFormat), out var _))
                {
                    UserDateFormat = "dddd, dd.MM.yyyy, HH:mm";
                }
            }
            <script>
                writeDate("@Model.CurrentUser.UserRegdate.ToUtcTime().ToString("o")", "@UserDateFormat");
            </script>
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Total mesaje
        </div>
        <div class="FlexRight PostInputWidth">
            @Model.TotalPosts
            @if (Model.TotalPosts > 0)
            {
                <span>&nbsp;-&nbsp;</span>
                <a asp-page="Search" asp-page-handler="byAuthor" asp-route-authorId="@Model.CurrentUser.UserId">Arată mesajele utilizatorului</a>
            }
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Mesaje pe zi (în medie)
        </div>
        <div class="FlexRight PostInputWidth">
            @Model.PostsPerDay.ToString("#########0.##")
        </div>
    </div>
    <p></p>
    <div class="FlexCenter">
        <div style="font-weight:bold; text-align: right">
            Cel mai activ în subiectul
        </div>
        <div class="FlexRight PostInputWidth">
            @if (Model.PreferredTopic.Id == null || Model.PreferredTopic.Title == null)
            {
                <span>-</span>
            }
            else
            {
                <a asp-page="./ViewTopic" asp-route-topicId="@Model.PreferredTopic.Id" asp-route-pageNum="1">@Html.Raw(Model.PreferredTopic.Title)</a>
            }
        </div>
    </div>

    @if (await Model.CanEditAsync())
    {
        <input type="submit" value="Salvează modificările" style="width:auto" />
    }
    <input asp-for="CurrentUser.UserId" type="hidden" />
    @Html.AntiForgeryToken()
</form>