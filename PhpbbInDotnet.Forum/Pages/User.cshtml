@page
@using Database.Entities
@using Domain
@using Domain.Extensions
@using Domain.Utilities
@using Microsoft.Extensions.Configuration
@using System.Globalization 
@using Objects
@using Microsoft.EntityFrameworkCore

@model PhpbbInDotnet.Forum.Pages.UserModel

@inject Services.IUserService _userService
@inject Database.SqlExecuter.ISqlExecuter _sqlExecuter
@inject Microsoft.Extensions.Configuration.IConfiguration _config

@{
    //_context.PhpbbGroups.AsNoTracking().FirstOrDefault(g => g.GroupId == Model.CurrentUser.GroupId)?.GroupUserUploadSize ?? 0;
    var Lang = Model.Language;
    var pageUserTask = _userService.ExpandForumUser(_userService.DbUserToForumUser(Model.CurrentUser!), ForumUserExpansionType.Permissions | ForumUserExpansionType.Foes);
    var canEditTask = Model.CanEdit();
    var isGlobalAdminTask = _userService.IsAdmin(Model.ForumUser);
    var ranksTask = _userService.GetAllRanks();
    var allStylesTask = _sqlExecuter.QueryAsync<(string styleName, int styleId)>("SELECT style_name, style_id FROM phpbb_styles");
    var uploadLimitTask = _sqlExecuter.QueryFirstOrDefaultAsync<long>(
        "SELECT group_user_upload_size FROM phpbb_groups WHERE group_id = @groupId",
        new { Model.CurrentUser?.GroupId });

    await Task.WhenAll(pageUserTask, canEditTask, isGlobalAdminTask, ranksTask, allStylesTask, uploadLimitTask);

    var pageUser = await pageUserTask;

    ViewData["Title"] = $"{Model.TranslationProvider.BasicText[Lang, "USER", Casing.Title]}: {pageUser.Username}";
    Layout = "~/Pages/_Layout.cshtml";

    var viewingUser = Model.ForumUser;
    var isSelf = viewingUser.UserId == Model.CurrentUser!.UserId;
    var canEdit = await canEditTask;
    var isGlobalAdmin = await isGlobalAdminTask;
    var hasTabs = isSelf || isGlobalAdmin;
    var showFlexAvatar = !string.IsNullOrWhiteSpace(Model.CurrentUser.UserAvatar) && !canEdit;
    var rankList = await ranksTask;
    var allStyles = (await allStylesTask).Select(x => new SelectListItem(x.styleName, x.styleId.ToString(), Model.CurrentUser.UserStyle == x.styleId));
    var uploadLimit = await uploadLimitTask;
}

<environment include="Development">
    <link rel="stylesheet" href="~/css/posting.css" />
    <script src="~/js/tabbedPage.js"></script>
    <link rel="stylesheet" href="~/css/tabbedPage.css" />
</environment>
<style>
    .FlexCaption {
        font-weight: bold;
        text-align: left;
        margin-bottom: auto;
    }

    .FlexRight input, select {
        width: 230px;
    }
</style>

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script>
    var $ = jQuery.noConflict();
    $(function () {
        $("#datepicker").datepicker({
            dateFormat: 'dd.mm.yy',
            firstDay: 1,
            dayNamesMin: $.map(dayNames, day => day.substring(0, 2)),
            dayNamesShort: $.map(dayNames, day => day.substring(0, 3)),
            dayNames: dayNames,
            monthNames: monthNames,
            monthNamesShort: $.map(monthNames, month => month.substring(0, 3)),
            changeMonth: true,
            changeYear: true,
            yearRange: 'c-90:c'
        });
    });

    function changeTab(edit, manageFoes) {
        $('#changeModeViewAsAnother').val(!edit);
        $('#changeModeManageFoes').val(manageFoes);
        $('#changeMode').submit();
    }

</script>

<form method="get" id="changeMode">
    <input type="hidden" asp-for="UserId" id="changeModeUserId" />
    <input type="hidden" asp-for="ViewAsAnother" id="changeModeViewAsAnother" />
    <input type="hidden" asp-for="ManageFoes" id="changeModeManageFoes" />
</form>

<form method="post" asp-page-handler="RemoveFoe" id="RemoveFoe" name="RemoveFoe" asp-antiforgery="false">
    <input type="hidden" asp-for="UserId" />
    <input type="hidden" asp-for="ViewAsAnother" />
</form>
<form method="post" asp-page-handler="AddFoe" id="AddFoe" name="AddFoe" asp-antiforgery="false">
    <input type="hidden" asp-for="UserId" />
    <input type="hidden" asp-for="ViewAsAnother" />
</form>
<h3>
    @Html.Raw(Model.TranslationProvider.BasicText[Lang, "USER_PROFILE"])
    @if (!isSelf && !canEdit)
    {
        <span> -&nbsp;@Model.CurrentUser.Username</span>
    }
</h3>
@if (canEdit || Model.Mode == UserPageMode.AddFoe || Model.Mode == UserPageMode.RemoveFoe || Model.Mode == UserPageMode.RemoveMultipleFoes)
{
    <span asp-validation-for="CurrentUser" class="validation"></span>
    <span class="success @(Model.Mode == UserPageMode.View ? "" : "message")">
        @switch (Model.Mode)
        {
            case UserPageMode.Edit when (Model.EmailChanged && isSelf):
                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "CHANGES_SAVED_MUST_LOGIN"]);
                break;
            case UserPageMode.Edit:
                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "CHANGES_SAVED"]);
                break;
            case UserPageMode.AddFoe:
                @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "ADDED_TO_FOES_CONFIRMATION_FORMAT"], Model.CurrentUser.Username));
                break;
            case UserPageMode.RemoveFoe:
                @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "REMOVED_FROM_FOES_CONFIRMATION_FORMAT"], Model.CurrentUser.Username));
                break;
            case UserPageMode.RemoveMultipleFoes:
                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "REMOVE_FOES_SUCCESS"]);
                break;
        }
    </span>
}
@if (hasTabs)
{
    <div class="tab">
        <button class="@(canEdit ? "tablinks" : "tablinks active")" onclick="changeTab(false, false)">
            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "PROFILE_OVERVIEW"])
        </button>
        <button class="@(canEdit && !(Model.ManageFoes ?? false) ? "tablinks active" : "tablinks")" onclick="changeTab(true, false)">
            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "EDIT_PROFILE"])
        </button>
        <button class="@(canEdit && (Model.ManageFoes ?? false) ? "tablinks active" : "tablinks")" onclick="changeTab(true, true)">
            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "MANAGE_FOES"])
        </button>
    </div>
}

@if (Model.ManageFoes ?? false)
{
    <div class="tabcontent" style="display:block !important">
        @if (!Model.Foes!.Any())
        {
            <i>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "NO_FOES"])</i>
        }
        else
        {
            <i>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "FOES_CAPTION"])</i>
            <form method="post" name="RemoveFoes" id="RemoveFoes" asp-page-handler="RemoveMultipleFoes">
                @foreach (var foe in Model.Foes!)
                {
                    <div style="margin: 15px 15px">
                        <input name="SelectedFoes" type="checkbox" value="@foe.UserId" style="margin-right:10px" />
                        <a asp-page="User" asp-route-userId="@foe.UserId">
                            @Html.Raw(foe.Username)
                        </a>
                    </div>
                }
                <hr class="BoxSeparator" />
                <button onclick="selectAllCheckboxes()" type="button" class="MyButton">
                    &#x2714;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SELECT_ALL_USERS"])
                </button>
                <span>&nbsp;&bull;&nbsp;</span>
                <input type="submit" value="&#x1F91D;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "REMOVE_SELECTED_USERS_FROM_LIST"])" onclick="return confirm('@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CONFIRM_REMOVE_FOES"])');" class="MyButton" />
                <input type="hidden" asp-for="UserId" />
                <input type="hidden" asp-for="ViewAsAnother" />
                <input type="hidden" asp-for="ManageFoes" />
            </form>
        }
        <p></p>
    </div>
}
else
{
    <div class="@(hasTabs ? "tabcontent" : "")" style="@(hasTabs ? "display:block !important" : "")">
        <form method="post" enctype="multipart/form-data">
            <div class="@(showFlexAvatar ? "FlexCenter" : "")">
                @if (showFlexAvatar)
                {
                    <div>
                        <img src="./File?userId=@Model.CurrentUser.UserId&handler=avatar" />
                    </div>
                }

                <div class="@(showFlexAvatar ? "FlexRight" : "")" style="@(showFlexAvatar ? "width: 100%" : "")">
                    <div class="FlexCenter">
                        <div class="FlexCaption">
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "USERNAME", Casing.Title])
                        </div>
                        <div class="FlexRight PostInputWidth">
                            @if (!(Model.ViewAsAnother ?? false) && isGlobalAdmin)
                            {
                                <input asp-for="CurrentUser!.Username" />
                            }
                            else
                            {
                                var color = string.IsNullOrWhiteSpace(Model.CurrentUser.UserColour) || Model.CurrentUser.UserColour == Constants.DEFAULT_USER_COLOR ? "auto" : $"#{Model.CurrentUser.UserColour}";
                                <span style="font-weight:bold; color:@color" , class="ThemeColor">
                                    @Html.Raw(Model.CurrentUser.Username)
                                </span>
                                @if (isSelf && canEdit)
                                {
                                    <br />
                                    <span class="Caption">
                                        @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "CHANGE_USERNAME_CAPTION_FORMAT"], _config.GetValue<string>("AdminEmail")))
                                    </span>
                                }
                            }
                        </div>
                    </div>
                    @if (!(Model.ViewAsAnother ?? false) && isSelf)
                    {
                        <p></p>
                        <div class="FlexCenter">
                            <div class="FlexCaption">
                                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "NEW_PASSWORD"])
                            </div>
                            <div class="FlexRight PostInputWidth">
                                <input asp-for="FirstPassword" type="password" autocomplete="new-password" /><br />
                                <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CHANGE_PASSWORD_CAPTION"])</span>
                            </div>
                        </div>
                        <p></p>
                        <div class="FlexCenter">
                            <div class="FlexCaption">
                                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "REPEAT_NEW_PASSWORD"])
                            </div>
                            <div class="FlexRight PostInputWidth">
                                <input asp-for="SecondPassword" type="password" autocomplete="new-password" />
                                <span asp-validation-for="SecondPassword" class="validation"></span>
                            </div>
                        </div>
                    }
                    @{
                        var rank = rankList.FirstOrDefault(x => x.RankId == Model.UserRank)?.RankTitle;
                        if (string.IsNullOrWhiteSpace(rank))
                        {
                            rank = Model.TranslationProvider.BasicText[Lang, "REGISTERED_MEMBER"];
                        }
                        if (!canEdit && rank != null)
                        {
                            <p></p>
                            <div class="FlexCenter">
                                <div class="FlexCaption">
                                    @Html.Raw(Model.TranslationProvider.BasicText[Lang, "RANK", Casing.FirstUpper])
                                </div>
                                <div class="FlexRight PostInputWidth">
                                    @Html.Raw(rank)
                                </div>
                            </div>
                        }
                    }

                    @{
                        var birthday = DateTime.MinValue;
                        if (canEdit || DateTime.TryParseExact(Model.CurrentUser.UserBirthday, "dd.MM.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal, out birthday))
                        {
                            <p></p>
                            <div class="FlexCenter">
                                @if (canEdit)
                                {
                                    <div class="FlexCaption">
                                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "BIRTH_DATE"])
                                    </div>
                                    <div class="FlexRight PostInputWidth">
                                        <input asp-for="Birthday" autocomplete="new-password" id="datepicker" /><br />
                                        <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "BIRTH_DATE_CAPTION"])</span><br />
                                        <span asp-validation-for="Birthday" class="validation"></span>
                                    </div>
                                }
                                else if (birthday != DateTime.MinValue)
                                {
                                    <div class="FlexCaption">
                                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "AGE"])
                                    </div>
                                    <div class="FlexRight PostInputWidth">
                                        @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "AGE_NUMBER_FORMAT"], (int)(DateTime.UtcNow.Subtract(birthday).TotalDays / 365.25)))
                                    </div>
                                }
                            </div>
                        }
                    }
                    <p></p>
                    <div class="FlexCenter">
                        <div class="FlexCaption">
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "PRESENTATION"])
                        </div>
                        <div class="FlexRight PostInputWidth">
                            @if (canEdit)
                            {
                                <input asp-for="CurrentUser!.UserOcc" />
                            }
                            else
                            {
                                @Html.Raw(Model.CurrentUser.UserOcc)
                            }
                        </div>
                    </div>
                    <p></p>
                    <div class="FlexCenter">
                        <div class="FlexCaption">
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "INTERESTS"])
                        </div>
                        <div class="FlexRight PostInputWidth">
                            @if (canEdit)
                            {
                                <input asp-for="CurrentUser!.UserInterests" />
                            }
                            else
                            {
                                @Html.Raw(Model.CurrentUser.UserInterests)
                            }
                        </div>
                    </div>
                    <p></p>
                    <div class="FlexCenter">
                        <div class="FlexCaption">
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "CITY"])
                        </div>
                        <div class="FlexRight PostInputWidth">
                            @if (canEdit)
                            {
                                <input asp-for="CurrentUser!.UserFrom" />
                            }
                            else
                            {
                                @Html.Raw(Model.CurrentUser.UserFrom)
                            }
                        </div>
                    </div>
                </div>
            </div>
            @if (canEdit)
            {
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "AVATAR"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (!string.IsNullOrWhiteSpace(Model.CurrentUser.UserAvatar))
                        {
                            <img src="./File?userId=@Model.CurrentUser.UserId&handler=avatar" /><br />
                            @Html.Raw(Model.CurrentUser.UserAvatar)<br />
                            <input asp-for="DeleteAvatar" style="width:auto" />
                            <span>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "REMOVE_THIS_AVATAR"])</span>
                            <br /><br />
                        }
                        <input asp-for="Avatar" class="HiddenFileInput" onchange="showElement('loadingConfirmation')" />
                        <label for="Avatar" class="MyButton">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SELECT_NEW_AVATAR"])</label><br />
                        <div style="display:none" id="loadingConfirmation">
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "AVATAR_LOADED_CONFIRMATION"])
                        </div>
                        <span asp-validation-for="Avatar" class="validation"></span>
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "FORUM_THEME"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Html.DropDownListFor(
                            m => m.CurrentUser!.UserStyle,
                            allStyles)
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "JUMP_TO_FIRST_UNREAD_ITEM"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <label>
                            <input asp-for="JumpToUnread" style="width:auto" />
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "JUMP_UNREAD_CAPTION_1"])<br />
                            <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "JUMP_UNREAD_CAPTION_2"])</span>
                        </label>
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "LANGUAGE", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Html.DropDownListFor(
                            m => m.CurrentUser!.UserLang,
                            (await Model.GetLanguages()).Select(x => new SelectListItem($"{x.LangLocalName} ({x.LangEnglishName})", x.LangIso, Model.CurrentUser.UserLang == x.LangIso)),
                            new { onchange = "changeDateFormats(this.options[this.selectedIndex].value)" }
                        )
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "DATE_FORMAT"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <select id="CurrentUser_UserDateformat" name="CurrentUser.UserDateformat">
                        </select>
                        <script>
                            var dateFormats = @Json.Serialize(await Model.TranslationProvider.GetDateFormatsInAllLanguages());
                            function changeDateFormats(language) {
                                var now = new Date(Date.now());
                                $('#CurrentUser_UserDateformat option').remove();
                                let days = getDayNames(language);
                                let months = getMonthNames(language);
                                dateFormats[language].forEach(format => {
                                    var text = now.format(format, days, months);
                                    var o = new Option(text, format, false, format == '@pageUser.UserDateFormat');
                                    $(o).html(text);
                                    $('#CurrentUser_UserDateformat').append(o);
                                })
                            }
                            changeDateFormats('@Model.CurrentUser.UserLang');
                        </script>
                    </div>
                </div>
            }
            @if (!(Model.ViewAsAnother ?? false) && isGlobalAdmin)
            {
                var permissions = new List<SelectListItem>(
                    (await _userService.GetUserRolesLazy()).Select(
                        p => new SelectListItem(p.RoleDescription, p.RoleId.ToString(), p.RoleId == Model.AclRole)
                    )
                );
                permissions.Add(new SelectListItem(Model.TranslationProvider.BasicText[Lang, "NO_ASSIGNED_ROLE"], "-1", !permissions.Any(p => p.Selected)));

                var ranks = new List<SelectListItem>(
                    rankList.Select(
                        r => new SelectListItem(r.RankTitle, r.RankId.ToString(), r.RankId == Model.CurrentUser.UserRank)
                    )
                );
                ranks.Add(new SelectListItem(Model.TranslationProvider.BasicText[Lang, "NO_ASSIGNED_RANK"], "0", !ranks.Any(p => p.Selected)));

                var groups = new List<SelectListItem>(
                    (await _userService.GetAllGroups()).Select(
                        g => new SelectListItem(g.GroupName, g.GroupId.ToString(), g.GroupId == Model.GroupId)
                    )
                );
                <hr class="BoxSeparator" />
                <div class="FlexCenter">
                    <h4>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "MANAGE_ACCOUNT"])</h4>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "EDIT_OWN_POSTS_TIME"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <input asp-for="CurrentUser!.UserEditTime" /><br />
                        <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "EDIT_OWN_POSTS_CAPTION"])</span><br />
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "USER_PERMISSIONS"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Html.DropDownListFor(m => m.AclRole, permissions, new { autocomplete = "new-password" })
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "RANK", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (canEdit)
                        {
                            @Html.DropDownListFor(m => m.UserRank, ranks, new { autocomplete = "new-password" })
                        }
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "GROUP", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (canEdit)
                        {
                            @Html.DropDownListFor(m => m.GroupId, groups, new { autocomplete = "new-password" })
                        }
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "COLOR", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (canEdit)
                        {
                            <input type="color" class="jscolor" autocomplete="new-password" id="color" onchange="$('#colorTitle').text($(this).val()); $('#backendColor').val($(this).val().substring(1))" value="#@Model.CurrentUser.UserColour" />
                            <span id="colorTitle" style="font-weight:bold; font-family:'Ubuntu Mono'; font-size: 1.5em">#@Model.CurrentUser.UserColour</span>
                            <br />
                            <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "COLOR_CAPTION"])</span>
                            <input asp-for="CurrentUser!.UserColour" type="hidden" id="backendColor" />
                        }
                    </div>
                </div>
            }
            <hr class="BoxSeparator" />
            <div class="FlexCenter">
                <h4>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CONTACT", Casing.Title])</h4>
            </div>
            <div class="FlexCenter">
                @if (canEdit)
                {
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "EMAIL", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <input asp-for="Email" /><br />
                        <span asp-validation-for="Email" class="validation"></span>
                        <span class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "EMAIL_CAPTION"])</span><br />
                        <label>
                            <input asp-for="ShowEmail" style="width:auto" /> @Html.Raw(Model.TranslationProvider.BasicText[Lang, "ALLOW_EMAIL_CONTACT"])
						</label>
                        <br />
                    </div>
                }
                else
                {
                    var showMail = (Model.CurrentUser.UserAllowViewemail.ToBool() && !(viewingUser.Foes?.Contains(pageUser.UserId) ?? false) && !(pageUser.Foes?.Contains(viewingUser.UserId) ?? false)) || isGlobalAdmin;
                    if (showMail)
                    {
                        <button class="MyButton" onclick="location.href='mailto:@Html.Raw(Model.CurrentUser.UserEmail)'" type="button" @(isSelf ? "disabled" : "")>
                            &#x2709;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SEND_EMAIL"])
                        </button>
                    }
                    var showPMs = (viewingUser.HasPrivateMessagePermissions && pageUser.HasPrivateMessages && !(viewingUser.Foes?.Contains(pageUser.UserId) ?? false) && !(pageUser.Foes?.Contains(viewingUser.UserId) ?? false)) || (isGlobalAdmin && pageUser.HasPrivateMessagePermissions);
                    if (showPMs)
                    {
                        if (showMail)
                        {
                            <span style="height:5px; width: 5px;">&nbsp;</span>
                        }
                        <button class="MyButton" onclick="location.href='/SendPrivateMessage?receiverId=@Model.CurrentUser.UserId'" type="button" @(isSelf ? "disabled" : "")>
                            &#x1F5E8;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SEND_PM"])
                        </button>
                    }
                    if (!canEdit && !string.IsNullOrEmpty(Model.CurrentUser.UserWebsite))
                    {
                        var website = Model.CurrentUser.UserWebsite;
                        if (!website.StartsWith("http", StringComparison.InvariantCultureIgnoreCase))
                        {
                            website = $"//{website}";
                        }
                        if (showPMs || showMail)
                        {
                            <span style="height:5px; width: 5px;">&nbsp;</span>
                        }
                        <button class="MyButton" onclick="window.open('@website', '_blank')" type="button">
                            &#x1F310;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "VISIT_WEBSITE"])
                        </button>
                    }
                }
            </div>
            @if (canEdit)
            {
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "WEBSITE"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <input asp-for="CurrentUser!.UserWebsite" />
                    </div>
                </div>
            }
            @if (canEdit && pageUser.HasPrivateMessagePermissions)
            {
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "ALLOW_PM_TITLE"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        <label>
                            <input asp-for="AllowPM" style="width:auto" />
                            @Html.Raw(Model.TranslationProvider.BasicText[Lang, "ALLOW_PM_CAPTION"])
                        </label>
                    </div>
                </div>
            }
            @if (!canEdit)
            {
                <hr class="BoxSeparator" />
                <div class="FlexCenter">
                    <h4>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "STATS"])</h4>
                </div>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "REGISTERED", Casing.FirstUpper])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @{
                            var UserDateFormat = (Model.ForumUser)?.UserDateFormat ?? Model.TranslationProvider.GetDefaultDateFormat(Lang);
                        }
                        <formatted-date date="@Model.CurrentUser.UserRegdate.ToUtcTime().ToString("o")" format="@UserDateFormat" />
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "LAST_ACTIVE"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (Model.CurrentUser.UserLastvisit > 0)
                        {
                            <formatted-date date="@Model.CurrentUser.UserLastvisit.ToUtcTime().ToString("o")" format="@UserDateFormat" />
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "TOTAL_POSTS"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Model.TotalPosts
                        @if (Model.TotalPosts > 0)
                        {
                            <span>&nbsp;-&nbsp;</span>
                            <a asp-page="Search" asp-page-handler="byAuthor" asp-route-authorId="@Model.CurrentUser.UserId">
                                @Html.Raw(Model.TranslationProvider.BasicText[Lang, "SHOW_USER_POSTS"])
                            </a>
                        }
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "AVG_POSTS_PER_DAY"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Model.PostsPerDay.ToString("#########0.##")
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "PREFERRED_TOPIC"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @if (Model.PreferredTopic.Id == null || Model.PreferredTopic.Title == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <a href="@ForumLinkUtility.GetRelativeUrlToTopic(Model.PreferredTopic.Id.Value, 1)">@Html.Raw(Model.PreferredTopic.Title)</a>
                        }
                    </div>
                </div>
                <p></p>
                <div class="FlexCenter">
                    <div class="FlexCaption">
                        @Html.Raw(Model.TranslationProvider.BasicText[Lang, "ATTACHED_FILES"])
                    </div>
                    <div class="FlexRight PostInputWidth">
                        @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "ATTACHED_FILES_COUNT_FORMAT"], Model.AttachCount))
                        @if (isSelf || isGlobalAdmin)
                        {
                            <span>- @Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "USED_SPACE_FORMAT"], StringUtility.ReadableFileSize(Model.AttachTotalSize)))</span>
                            if (uploadLimit > 0)
                            {
                                <span>@Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "TOTAL_SPACE_FORMAT"], StringUtility.ReadableFileSize(uploadLimit)))</span>
                            }
                        }
                        @if (Model.AttachCount > 0)
                        {
                            <span>&nbsp;-&nbsp;</span>
                            <a asp-page="ViewAttachments" asp-route-userId="@Model.CurrentUser.UserId">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SHOW_USER_ATTACHED_FILES"])</a>
                        }
                    </div>
                </div>
            }
            @if (canEdit)
            {
                <p>&nbsp;</p>
                <input class="MyButton" type="submit" value="@Html.Raw(Model.TranslationProvider.Admin[Lang, "SAVE_CHANGES"])" style="width:auto" formnovalidate />
            }
            @if (!isSelf && !canEdit)
            {
                var canAddFoe = await Model.CanAddFoe();
                var canRemoveFoe = Model.CanRemoveFoe();
                if (canAddFoe || canRemoveFoe)
                {
                    <hr class="BoxSeparator" />
                    <div class="FlexCenter">
                        @if (canAddFoe)
                        {
                            <input class="MyButton" type="submit" form="AddFoe" value="&#x1F6AB;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "ADD_TO_FOES"])" style="font-size: 15px; margin-top:5px; vertical-align: top"
                                   onclick="return confirm('@Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "ADD_TO_FOES_CONFIRM_FORMAT"], Model.CurrentUser.Username))')" />
                        }
                        else if (canRemoveFoe)
                        {
                            <input class="MyButton" type="submit" form="RemoveFoe" value="&#x1F91D;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "REMOVE_FROM_FOES"])" style="font-size: 15px; margin-top:5px; vertical-align: top"
                                   onclick="return confirm('@Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "REMOVE_FROM_FOES_CONFIRM_FORMAT"], Model.CurrentUser.Username))')" />
                        }
                    </div>
                }
            }
            <input asp-for="CurrentUser!.UserId" type="hidden" />
            @Html.AntiForgeryToken()
        </form>
        <p></p>
    </div>

    @if (isGlobalAdmin)
    {
        <p></p>
        <a asp-page="Admin" asp-route-userId="@pageUser.UserId" asp-page-handler="UserSearch">
            @Html.Raw(Model.TranslationProvider.Admin[Lang, "OPEN_IN_ADMIN_PANEL"])
        </a>
    }
}
