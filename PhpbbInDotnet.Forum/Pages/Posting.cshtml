@page

@using System.Web
@using Domain
@using Domain.Extensions
@using Domain.Utilities
@using CustomPartials
@using Objects
@using Objects.Configuration
@using Services
@using Services.Storage
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json

@model PhpbbInDotnet.Forum.Pages.PostingModel

@inject IWritingToolsService _writingService
@inject IBBCodeRenderingService _renderingService
@inject IStorageService _storageService
@inject IUserService _userService
@inject IForumTreeService _forumService
@inject IConfiguration _config

@{
	var Lang = Model.Language;

	ViewData["Title"] = Model.TranslationProvider.BasicText[Lang, "WRITE_NEW_POST"];
	Layout = "~/Pages/_Layout.cshtml";

	var CurrentUser = Model.ForumUser;
	var CanCreatePoll = Model.Action == PostingActions.NewTopic || (Model.Action == PostingActions.EditForumPost && (Model.CurrentTopic?.TopicFirstPostId ?? 0) == Model.PostId);
	var UserDateFormat = CurrentUser.UserDateFormat ?? Model.TranslationProvider.GetDefaultDateFormat(Lang);
	var IsMod = await _userService.IsUserModeratorInForum(Model.ForumUser, Model.ForumId);

	if (Model.ForumId > 0)
	{
		ViewData[Constants.ViewDataKeys.BREADCRUMBS] = _forumService.GetBreadCrumbs(await _forumService.GetForumTree(CurrentUser, false, false), Model.ForumId);
	}
}

<environment include="Development">
	<script src="~/js/posting.js"></script>
	<link rel="stylesheet" href="~/css/posting.css" />
</environment>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.css" integrity="sha512-x3tME/kvJ3wzZ664qyANYueTLeJmRsoEbcIONhCei3DZJgNou8YwHos3ONthiwfzDvLE/H91ByIhSHVM10vS8g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.js" integrity="sha512-KJYWC7RKz/Abtsu1QXd7VJ1IJua7P7GTpl3IKUqfa21Otg2opvRYmkui/CXBC6qeDYCNlQZ7c+7JfDXnKdILUA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js" integrity="sha512-zYXldzJsDrNKV+odAwFYiDXV2Cy37cwizT+NkuiPGsa9X1dOz04eHvUWVuxaJ299GvcJT31ug2zO4itXBjFx4w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script type="text/javascript">
	var posting = new Posting(
		@Json.Serialize(await _renderingService.GetTagMap()),
		@(_config.GetValue<int>("UploadLimitsMB:Images")),
		@(_config.GetValue<int>("UploadLimitsCount:Images")),
		@(IsMod.ToString().ToLower()),
		@((Model.Action == PostingActions.EditForumPost).ToString().ToLower()),
		'@UserDateFormat',
		'@(_config.GetValue<string>("BaseUrl"))',
		@Json.Serialize(Model.Attachments?.Select(a => a.AttachId) ?? [])
	);

	const shouldFocusMessage = @Json.Serialize(Model.PreviewablePost is null);
	$(window).on('load', function () {
		if ($('#attachPanel').is(':visible')) {
			$('#attachButton').text(posting.hideAttachText);
		}
		else {
			$('#attachButton').text(posting.showAttachText);
		}
		if ($('#pollPanel').is(':visible')) {
			$('#pollButton').text(posting.hidePollText);
		}
		else {
			$('#pollButton').text(posting.showPollText);
		}

		let quotedPostText = @Json.Serialize(Model.QuotedPostText);
		if (quotedPostText) {
			posting.addquote(quotedPostText, @Json.Serialize(Model.QuotedPostAuthor), @Json.Serialize(Model.PostId), @Json.Serialize(Model.QuotedAttachments));
		}

		$('#message').prop('disabled', false);
		$('#PreviewButton').prop('disabled', false);
		$('#SaveDraftButton').prop('disabled', false);
		$('#SubmitButton').prop('disabled', false);

		if (shouldFocusMessage) {
			$('#message').focus();
		}
	});

	var isFormSubmitting = false;
	var isDraftSaved = @Json.Serialize(Model.SaveDraftSuccess ?? false);
	window.addEventListener('beforeunload', (event) => {
		if (isFormSubmitting) {
			isFormSubmitting = false;
		} else if (!isDraftSaved) {
			event.preventDefault();
			event.returnValue = 'x';
		}
	});
</script>


@if (Model.Action == PostingActions.EditForumPost || Model.Action == PostingActions.NewForumPost)
{
	@await Html.PartialAsync("_HeaderLinksPartial", new _HeaderLinksPartialModel(Lang, CurrentUser.IsAnonymous), ViewData)
	<p>&nbsp;</p>
	<h3>
		@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DO_REPLY", Casing.Title]):
		@if (Model.PostId.HasValue)
		{
			<a asp-page="/ViewTopic" asp-route-postId="@Model.PostId.Value" asp-page-handler="ByPostId">@HttpUtility.HtmlDecode(Model.CurrentTopic!.TopicTitle)</a>
		}
		else
		{
			<a asp-page="/ViewTopic" asp-route-topicId="@Model.TopicId!.Value" asp-route-pageNum="1">@HttpUtility.HtmlDecode(Model.CurrentTopic!.TopicTitle)</a>
		}
	</h3>
}
else if (Model.Action == PostingActions.NewTopic)
{
	<h3>
		@Html.Raw(Model.TranslationProvider.BasicText[Lang, "OPEN_NEW_TOPIC"]):
		<a asp-page="/ViewForum" asp-route-forumId="@Model.ForumId">@HttpUtility.HtmlDecode(Model.CurrentForum?.ForumName ?? string.Empty)</a>
	</h3>
}

@await Html.PartialAsync("_RulesPartial", new _RulesPartialModel
{
    ForumRules = Model.CurrentForum?.ForumRules,
    ForumRulesLink = Model.CurrentForum?.ForumRulesLink,
    Language = Lang
}, ViewData)

@if (Model.PreviewablePost != null)
{
	<p></p>
	if (Model.PreviewablePoll != null)
	{
		<hr class="BoxSeparator" />
		@await Html.PartialAsync("_PollPartial", new _PollPartialModel(CurrentUser, Model.PreviewablePoll, isPreview: true), ViewData)
		<p></p>
	}

	@await Html.PartialAsync("_PostPartial", new _PostPartialModel
	{
		CurrentUser = CurrentUser,
		Post = Model.PreviewablePost,
		Language = Lang,
		IsPreview = true
	}, ViewData)

	<hr class="BoxSeparator" />
	<p></p>
}

<form name="postform" method="post" enctype="multipart/form-data" onsubmit="isFormSubmitting = true;">
	@await Html.PartialAsync("_TextInputPartial", new _TextInputPartialModel(Lang, Model.PostTitle, Model.PostText))

	@if (Model.Action == PostingActions.EditForumPost)
	{
		<div style="clear:both">&nbsp;</div>
		<input asp-for="EditReason" type="text" style="width:100%" placeholder="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "EDIT_REASON"])" />
	}

	<button onclick="posting.toggleAttach()" type="button" class="PostingButton MyButton SpacedButton">
		&#128206; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "ATTACHED_FILES"])
	</button>

	<button onclick="posting.toggleEmoji()" type="button" class="Hide960 PostingButton MyButton SpacedButton">
		&#x1F642; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "EMOJI"])
	</button>

	@if (CanCreatePoll)
	{
		<button onclick="posting.togglePoll()" type="button" class="PostingButton MyButton SpacedButton">
			&#x2714; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "POLL", Casing.Title])
		</button>
	}

	<input type="submit" 
		value="&#x1F440; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "DO_PREVIEW", Casing.Title])"
		id="PreviewButton"
		onclick="return posting.censor()"
		asp-page-handler="Preview" 
		class="PostingButton MyButton SpacedButton" 
		formnovalidate />

	@switch (Model.Action)
	{
		case PostingActions.NewTopic:
		case PostingActions.NewForumPost:
			<input type="submit" 
				value="&#x1F4BE; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "SAVE_DRAFT"])"
				id="SaveDraftButton"
				onclick="return posting.censor()"
				asp-page-handler="SaveDraft" 
				class="PostingButton MyButton SpacedButton" 
				formnovalidate />
			<input type="submit" 
				value="&#x27A1; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "SUBMIT_POST"])"
				id="SubmitButton"
				onclick="return posting.censor()"
				asp-page-handler="NewForumPost" 
				class="PostingButton MyButton SpacedButton MyMainButton" 
				formnovalidate />
			break;
		case PostingActions.EditForumPost:
			<input type="submit" 
				value="&#x27A1; @Html.Raw(Model.TranslationProvider.BasicText[Lang, "SUBMIT_POST"])" 
				id="SubmitButton"
				onclick="return posting.censor()" 
				asp-page-handler="EditForumPost" 
				class="PostingButton MyButton SpacedButton MyMainButton" 
				formnovalidate />
			break;
		default:
			<span class="validation">@Html.Raw(Model.TranslationProvider.Errors[Lang, "AN_ERROR_OCCURRED"])</span>
			break;
	}
	
	<b>
		<span asp-validation-for="PostTitle" class="validation"></span>
		<span asp-validation-for="PostText" class="validation"></span>
		<span asp-validation-for="LastPostTime" class="validation"></span>
	</b>
	
	@if (Model.SaveDraftSuccess is not null && !string.IsNullOrWhiteSpace(Model.SaveDraftMessage))
	{
		var colorClass = Model.SaveDraftSuccess == true ? "success" : "fail";
		<span class="message @colorClass">
			@Html.Raw(Model.SaveDraftMessage)
		</span>
	}
	else if (Model.DeleteDraftSuccess is not null && !string.IsNullOrWhiteSpace(Model.DeleteDraftMessage))
	{
		var colorClass = Model.DeleteDraftSuccess == true ? "success" : "fail";
		<span class="message @colorClass">
			@Html.Raw(Model.DeleteDraftMessage)
		</span>
	}

	@if (Model.ExistingPostDraft?.DraftId > 0)
	{
		<p></p>
		@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DRAFT_SAVED"])
		<formatted-date date="@Model.ExistingPostDraft.SaveTime.ToUtcTime().ToString("o")" format="@UserDateFormat" />
		<span>&nbsp;&bull;&nbsp;</span>
		<input asp-for="ExistingPostDraft!.DraftId" type="hidden" />
		<input asp-for="ExistingPostDraft!.SaveTime" type="hidden" />
		<input type="submit" 
			value="&#x1F6AE;&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DELETE_DRAFT", Casing.Title])"
			asp-page-handler="DeleteDraft" 
			class="PostingButton MyButton SpacedButton" 
			formnovalidate />
		<p></p>
	}

	@if (CanCreatePoll)
	{
		<div id="pollPanel" style="display:@(Model.ShowPoll ? "block" : "none")" class="PostInputWidth">
			<br />
			<h3 style="float:left">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "POLL", Casing.Title])</h3>
			@if (Model.Action == PostingActions.EditForumPost)
			{
				<span style="margin-bottom:10px">
					&nbsp;&bull;&nbsp;
					<input type="submit" value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DELETE_POLL"])" asp-page-handler="DeletePoll" onclick="return confirm('@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CONFIRM_DELETE_POLL"])')" class="MyButton" formnovalidate />
				</span>
			}
			<p style="clear:both"></p>
			<hr class="BoxSeparator" />
			<div class="FlexCenter">
				<div>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "POLL_QUESTION"])</div>
				<div class="FlexRight PollInput">
					<input asp-for="PollQuestion" class="InputBox" style="width:100%" /> <br />
					<span asp-validation-for="PollQuestion" class="validation"></span>
				</div>
			</div>
			<hr class="BoxSeparator" />
			<div class="FlexCenter">
				<div>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "POLL_OPTIONS"])</div>
				<div class="FlexRight PollInput">
					<textarea asp-for="PollOptions" rows="4" class="InputBox" style="width:100%" onkeydown="return posting.confirmPollChange(this)"></textarea>
					<span asp-validation-for="PollOptions" class="validation"></span>
				</div>
			</div>
			<hr class="BoxSeparator" />
			<div class="FlexCenter">
				<div>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "VOTING_TIME"])</div>
				<div class="FlexRight PollInput">
					<input asp-for="PollExpirationDaysString" onchange="posting.showExpirationDate(this.value)" id="pollExpiration" class="InputBox" style="width:100%" /><br />
					<div class="Caption">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "POLL_TIME_CAPTION"])</div>
					<span id="pollExpirationHelper"></span>
					<span asp-validation-for="PollExpirationDaysString" class="validation"></span>
				</div>
			</div>
			<hr class="BoxSeparator" />
			<div class="FlexCenter">
				<div>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "OPTIONS_PER_USER"])</div>
				<div class="FlexRight PollInput">
					<input asp-for="PollMaxOptions" class="InputBox" style="width:100%" />
					<span asp-validation-for="PollMaxOptions" class="validation"></span>
				</div>
			</div>
			<hr class="BoxSeparator" />
			<div class="FlexCenter">
				<div>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CAN_CHANGE_VOTE"])</div>
				<div class="FlexRight PollInput">
					<input asp-for="PollCanChangeVote" class="InputBox" />
					<span>&nbsp;@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CHANGE_VOTE_CAPTION"])</span>
					<span asp-validation-for="PollCanChangeVote" class="validation"></span>
				</div>
			</div>
		</div>
	}
	@{
		var sizeLimit = _config.GetObject<AttachmentLimits>("UploadLimitsMB");
		var countLimit = _config.GetObject<AttachmentLimits>("UploadLimitsCount");

		<div id="attachPanel" style="display:@(Model.ShowAttach ? "block" : "none")">
			<br />
			<h3 style="float:left">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "ATTACHED_FILES"])</h3>
			<span>
				&nbsp;
				<label for="Files" class="MyButton SpacedButtonNotTop SlimButton">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CHOOSE_FILES"])</label>
			</span>
			<p></p>
			<label>
				@if (IsMod)
				{
									@Html.CheckBoxFor(m => m.ShouldResize)
				}
				else
				{
									<input type="checkbox" checked disabled />
				}
				@Html.Raw(Model.TranslationProvider.BasicText[Lang, "SHOULD_RESIZE_IMAGES"])
			</label>
			<p></p>
			<input asp-for="Files" onchange="posting.submitAttachments()" multiple class="HiddenFileInput" />
			@if (!IsMod)
			{
								<span class="Caption">
									@Html.Raw(string.Format(Model.TranslationProvider.BasicText[Lang, "CHOOSE_FILES_CAPTION_FORMAT"], countLimit.Images, sizeLimit.Images, countLimit.OtherFiles, sizeLimit.OtherFiles))
								</span>
			}
			<span asp-validation-for="Files" class="validation"></span>
			<div id="fileUploadStatus"></div>
			<input type="submit" 
				value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "LOAD_FILES"])"
				asp-page-handler="AddAttachment" 
				style="display:none" 
				id="submitAttachmentsButton" 
				formnovalidate />
			@if (Model.Attachments?.Any() == true)
			{
				<hr class="SubtypeSeparator" />
				<h4 style="float:left; margin-bottom:0px; margin-top:10px;">@Html.Raw(Model.TranslationProvider.BasicText[Lang, "ALREADY_ATTACHED"])</h4>
				<span style="display: inline-block">
					&nbsp;
					<input type="button"
						   onclick="posting.toggleAttachOrdering(this)"
						   class="MyButton PostingButton SpacedButton"
						   value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "ORDER_FILES"])" />
					<input type="submit"
						value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DELETE_ALL_FILES"])"
						asp-page-handler="DeleteAllAttachments"
						class="MyButton PostingButton SpacedButton"
						formnovalidate
						onclick="return confirm('@Html.Raw(Model.TranslationProvider.BasicText[Lang, "CONFIRM_DELETE_ALL_ATTACHMENTS"])')" />
				</span>
				<p>&nbsp;</p>
				<div id="attachManagementPanel">
					<span asp-validation-for="DeleteFileDummyForValidation" class="validation"></span>
					@for (var i = 0; i < Model.Attachments.Count; i++)
					{
						<div data-attach-id="@Model.Attachments[i].AttachId" data-index="@i" style="clear:both">
							<b>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "FILE_NAME"]):</b> @Model.Attachments[i].RealFilename
							<span style="display: inline-block">
								&nbsp;
								<input type="button"
									   value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "MAKE_INLINE"])"
									   onclick="posting.attach_inline($(this).parent().parent().data('index'), '@Model.Attachments[i].RealFilename.Replace("'", "\\'")')"
									   class="MyButton SpacedButton" />
								<input type="submit"
									   value="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "DELETE_FILE"])"
									   asp-page-handler="DeleteAttachment"
									   onclick="$('#idToDelete').val(@Model.Attachments[i].AttachId); return true;"
									   class="MyButton SpacedButton"
									   formnovalidate />
							</span>
							<br />
							<textarea 
								type="text" 
								asp-for="Attachments![i].AttachComment" 
								rows="2" 
								style="display:inline-block; color:black; width: 100%" 
								class="InputBox"
								placeholder="@Html.Raw(Model.TranslationProvider.BasicText[Lang, "FILE_COMMENT"])"></textarea>
							<input type="hidden" asp-for="Attachments![i].AttachId" />
							<input type="hidden" asp-for="Attachments![i].RealFilename" />
							<input type="hidden" asp-for="Attachments![i].PhysicalFilename" />
							<input type="hidden" asp-for="Attachments![i].Mimetype" />
							<input type="hidden" asp-for="Attachments![i].Filesize" />
							<input type="hidden" asp-for="Attachments![i].OrderInPost" />
							<p>&nbsp;</p>
						</div>
					}
					<input type="hidden" name="idToDelete" id="idToDelete" value="" />
				</div>
				<div id="attachSortingPanel" style="display:none">
					<div id="attachmentNames" style="width:100%">
						@foreach (var attach in Model.Attachments)
						{
							<div class="MySortableItem" data-attach-id="@attach.AttachId">
								@Html.Raw(attach.RealFilename)
								<input type="hidden" asp-for="AttachmentOrder" value="@attach.AttachId" />
							</div>
						}
					</div>
				</div>
				<input type="hidden" asp-for="AttachmentOrderHasChanged" id="AttachmentOrderHasChanged" value="false" />
			}
						</div>
	}
	<div id="emojiPanel" style="display:none; clear:both;">
		@foreach (var smiley in (await _writingService.GetLazySmilies()).GroupBy(s => s.SmileyUrl).Select(g => g.FirstOrDefault()))
		{
			<a href="javascript:posting.insert_text('@smiley!.Code', true);">
				<img src="@_storageService.GetEmojiRelativeUrl(smiley.SmileyUrl)" alt="@smiley.Code" title="@smiley.Emotion" style="margin:2px" />
			</a>
		}
	</div>

	<input asp-for="ForumId" type="hidden" id="ForumId" />
	<input asp-for="TopicId" type="hidden" id="TopicId" />
	<input asp-for="PostId" type="hidden" id="PostId" />
	<input asp-for="PageNum" type="hidden" id="PageNum" />
	<input asp-for="Action" type="hidden" id="Action" />
	<input asp-for="CurrentTopic!.TopicFirstPostId" type="hidden" />
	<input asp-for="CurrentTopic!.TopicTitle" type="hidden" />
	<input asp-for="LastPostTime" type="hidden" id="lastPostTime" />
	<input asp-for="PostTime" type="hidden" />
	<input asp-for="ReturnUrl" type="hidden" />
	<input asp-for="QuotePostInDifferentTopic" type="hidden" />
	<input asp-for="DestinationTopicId" type="hidden" />
</form>

@{
	var previousPosts = await Model.GetPreviousPosts();
	if (previousPosts?.Posts.Any() == true)
	{
		<script>
			var texts = @Json.Serialize(previousPosts.Posts.ToDictionary(k => k.PostId, v => _writingService.CleanBbTextForDisplay(v.PostText, v.BbcodeUid)));
			var attachments = @Json.Serialize(previousPosts.Attachments.ToDictionary(k => k.Key, v => v.Value.Indexed().Select(a => new QuotedAttachment(a.Index, a.Item.DisplayName)) ?? []));
			$('#lastPostTime').val(@Math.Max(previousPosts.Posts.First().PostTime, previousPosts.Posts.First().PostEditTime));
		</script>

		<p>&nbsp;</p>
		<h3>@Html.Raw(Model.TranslationProvider.BasicText[Lang, "PREVIOUS_POSTS"])</h3>

		foreach (var post in previousPosts.Posts)
		{
			post.Attachments = previousPosts.Attachments.TryGetValue(post.PostId, out var val) ? val : new List<Objects.AttachmentDto>();

			@await Html.PartialAsync("_PostPartial", new _PostPartialModel
			{
				CurrentUser = CurrentUser,
				Post = post,
				ShowQuoteButton = !(CurrentUser.Foes?.Contains(post.AuthorId) ?? false),
				Language = Lang,
			}, ViewData)
		}
	}
}

<script>
	var tribute = new Tribute({
		values: @Html.Raw(SerializationUtility.ToCamelCaseJson(await _userService.GetUsers())),
		trigger: "@@",
		allowSpaces: true,
		noMatchTemplate: ''
	});

	tribute.attach(document.getElementById("message"));

	var pollExpiration = document.getElementById("pollExpiration");
	if (pollExpiration) {
		posting.showExpirationDate(pollExpiration.value);
	}

	var attachmentNames = document.getElementById('attachmentNames');
	if (attachmentNames) {
		Sortable.create(attachmentNames, { 
			animation: 150,
			onSort: posting.onSortAttachmentList
		});
	}

	$('#message').prop('disabled', true);
	$('#PreviewButton').prop('disabled', true);
	$('#SaveDraftButton').prop('disabled', true);
	$('#SubmitButton').prop('disabled', true);
		
	posting.persistQueryString();
</script>

<div id="imgcheckstatus" class="Popup"></div>

