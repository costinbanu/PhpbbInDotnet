@model PhpbbInDotnet.Forum.Pages.CustomPartials.Admin._AdminForumPermissionsPartialModel

@using Microsoft.EntityFrameworkCore;
@using Objects;
@using Database;
@using Database.Entities;
@using Utilities;

@inject IForumDbContext _context
@inject Utilities.ICommonUtils _utils
@inject Languages.LanguageProvider _languageProvider

@{
    var groupedPermissions = from p in Model.Permissions ?? new List<ForumPermissions>()
                             group p by new { p.Id, p.Name } into groups
                             select groups;

    var entityIds = groupedPermissions.Select(x => x.Key.Id).Distinct();
    var remainingEntities = new List<KeyValuePair<string, int>>();
    var roles = new List<PhpbbAclRoles>();
    var index = 0;
    if (Model.EntityType == AclEntityType.Group)
    {
        remainingEntities = await (
            from g in _context.PhpbbGroups.AsNoTracking()
            where !entityIds.Contains(g.GroupId)
            select KeyValuePair.Create(g.GroupName, g.GroupId)
        ).ToListAsync();
    }
    else
    {
        remainingEntities = await (
            from u in _context.PhpbbUsers.AsNoTracking()
            where u.UserId != 1 && !entityIds.Contains(u.UserId) && u.UserType != 2
            orderby u.Username
            select KeyValuePair.Create(u.Username, u.UserId)
        ).ToListAsync();
    }
    roles = await _context.PhpbbAclRoles.Where(r => r.RoleType == "f_").ToListAsync();
}

@foreach (var permissions in groupedPermissions)
{
    <div class="FlexCenter">
        <div>@permissions.Key.Name</div>
        <div class="FlexRight PostInputWidth">
            @Html.DropDownList(
                $"dto.{Model.EntityType}ForumPermissions[{index}]",
                permissions.Select(p => new SelectListItem(_languageProvider.Admin[Model.Language, p.RoleName!, Casing.None], $"{permissions.Key.Id}_{p.RoleId}", p.HasRole)),
                new { style = "width:75%; margin-top:10px;" }
            )
            <label>
                @Html.Raw(_languageProvider.Admin[Model.Language, "ASK_DELETE"])
                <input type="checkbox" name="dto.@(Model.EntityType)PermissionToRemove" value="@(index++)" />
            </label>
        </div>
    </div>
}

<script type="text/javascript">
    function changeIds_@(Model.Self)(oldValue, newValue) {
        document.getElementById("newPermissions_@(Model.Self)").querySelectorAll("option").forEach(input => {
            input.value = input.value.replace(oldValue + "_", newValue + "_");
        });
    }
</script>

@if (remainingEntities.Any())
{
    <p>&nbsp;</p>
    <div style="border:solid 1px black; padding:5px; border-radius:5px; width:95%">
        <strong>
            @Html.Raw(_languageProvider.Admin[Model.Language, Model.EntityType == AclEntityType.Group ? "ADD_PERMISSIONS_FOR_NEW_GROUP" : "ADD_PERMISSIONS_FOR_NEW_USER"])
        </strong>
        <p>&nbsp;</p>
        @if (Model.EntityType == AclEntityType.User)
        {
            <input type="text" id="permissionsUser" placeholder="@Html.Raw(_languageProvider.Admin[Model.Language, "SEARCH_FOR_USER"])" autocomplete="new-password" />
        }
        else
        {
            var dropDownItems = new List<SelectListItem>
{
                new SelectListItem(_languageProvider.Admin[Model.Language, "CHOOSE_GROUP"], "0", true, true)
            };
            dropDownItems.AddRange(remainingEntities.Select(e => new SelectListItem(e.Key, e.Value.ToString())));
            @Html.DropDownList($"permissionsGroup", dropDownItems, new { onchange = "changeGroupId(this.options[this.selectedIndex].value, this.options[this.selectedIndex].text)" });
        }
        <p id="tributeHolder" style="position:relative">&nbsp;</p>
        <div class="FlexCenter">
            <div id="entityName_@(Model.Self)">
                @Html.Raw(_languageProvider.Admin[Model.Language, Model.EntityType == AclEntityType.Group ? "NEW_GROUP" : "NEW_USER"])
            </div>
            <div class="FlexRight PostInputWidth">
                @Html.DropDownList(
                    $"dto.{Model.EntityType}ForumPermissions[{index++}]",
                    roles.Select(p => new SelectListItem(_languageProvider.Admin[Model.Language, p.RoleName, Casing.None], $"0_{p.RoleId}")),
                    new { id = $"newPermissions_{Model.Self}", style = "width:95%" }
                )
            </div>
        </div>
    </div>
    @if (Model.EntityType == AclEntityType.User)
    {
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.css" integrity="sha512-x3tME/kvJ3wzZ664qyANYueTLeJmRsoEbcIONhCei3DZJgNou8YwHos3ONthiwfzDvLE/H91ByIhSHVM10vS8g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.js" integrity="sha512-KJYWC7RKz/Abtsu1QXd7VJ1IJua7P7GTpl3IKUqfa21Otg2opvRYmkui/CXBC6qeDYCNlQZ7c+7JfDXnKdILUA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script type="text/javascript">
            var tribute = new Tribute({
                values: @Html.Raw(_utils.ToCamelCaseJson(remainingEntities)),
                selectTemplate: function (item) {
                    return item.original.key;
                },
                allowSpaces: true,
                trigger: ' ',
                menuContainer: document.getElementById("tributeHolder"),
                positionMenu: false,
            });

            var permissionsUser = document.getElementById("permissionsUser");
            var oldUserValue = 0;

            tribute.attach(permissionsUser);

            permissionsUser.addEventListener("tribute-replaced", function(e) {
                var newValue = e.detail.item.original.value;
                var newKey = e.detail.item.original.key
                changeIds_@(Model.Self)(oldUserValue, newValue);
                permissionsUser.value = newKey;
                oldUserValue = newValue;
                document.getElementById("entityName_@(Model.Self)").innerText = newKey;
            });

            permissionsUser.addEventListener("focusin", function (e) {
                tribute.showMenuForCollection(permissionsUser);
            });
        </script>
    }
    else
    {
        <script type="text/javascript">
                    var oldGroupValue = 0;
                    function changeGroupId(newValue, newKey) {
                        changeIds_@(Model.Self)(oldGroupValue, newValue);
                        oldGroupValue = newValue;
                        document.getElementById("entityName_@(Model.Self)").innerText = newKey;
                    }
        </script>
    }
}
