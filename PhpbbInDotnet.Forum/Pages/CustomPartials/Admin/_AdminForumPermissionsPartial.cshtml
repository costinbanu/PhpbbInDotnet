@model PhpbbInDotnet.Forum.Pages.CustomPartials.Admin._AdminForumPermissionsPartialModel

@using Microsoft.EntityFrameworkCore;
@using PhpbbInDotnet.Objects;
@using PhpbbInDotnet.Database;
@using PhpbbInDotnet.Database.Entities;
@using PhpbbInDotnet.Utilities;

@inject ForumDbContext _context
@inject Services.WritingToolsService _writingSerivce

@{
    var groupedPermissions = from p in Model.Permissions ?? new List<ForumPermissions>()
                             group p by new { p.Id, p.Name } into groups
                             select groups;

    var entityIds = groupedPermissions.Select(x => x.Key.Id).Distinct();
    var entityName = Model.EntityType == AclEntityType.Group ? "grup" : "utilizator";
    var remainingEntities = new List<KeyValuePair<string, int>>();
    var roles = new List<PhpbbAclRoles>();
    var index = Model.StartIndex;
    if (Model.EntityType == AclEntityType.Group)
    {
        remainingEntities = await (
            from g in _context.PhpbbGroups
            where !entityIds.Contains(g.GroupId)
            select KeyValuePair.Create(g.GroupName, g.GroupId)
        ).ToListAsync();
    }
    else
    {
        remainingEntities = await (
            from u in _context.PhpbbUsers
            where u.UserId != 1 && !entityIds.Contains(u.UserId) && u.UserType != 2
            orderby u.Username
            select KeyValuePair.Create(u.Username, u.UserId)
        ).ToListAsync();
    }
    roles = await _context.PhpbbAclRoles.Where(r => r.RoleType == "f_").ToListAsync();
}

@foreach (var permissions in groupedPermissions)
{
<div class="FlexCenter">
    <div>@permissions.Key.Name</div>
    <div class="FlexRight PostInputWidth">
        @Html.DropDownList(
            $"dto.{Model.EntityType}ForumPermissions[{index}]",
            permissions.Select(p => new SelectListItem(p.RoleDescription, $"{permissions.Key.Id}_{p.RoleId}", p.HasRole)),
            new { style = "width:75%; margin-top:10px;" }
        )
        &nbsp;<label>Șterge? <input type="checkbox" name="dto.@(Model.EntityType)PermissionToRemove" value="@(index++)" /></label>
    </div>
</div>
}

<script type="text/javascript">
    function changeIds_@(Model.Self)(oldValue, newValue) {
        document.getElementById("newPermissions_@(Model.Self)").querySelectorAll("option").forEach(input => {
            input.value = input.value.replace(oldValue + "_", newValue + "_");
        });
    }
</script>

@if (remainingEntities.Any())
{
    <p>&nbsp;</p>
    <div style="border:solid 1px black; padding:5px; border-radius:5px; width:95%">
        <strong>Adaugă permisiuni pentru un @entityName nou</strong>
        <p>&nbsp;</p>
        @if (Model.EntityType == AclEntityType.User)
        {
            <input type="text" id="permissionsUser" placeholder="Caută un utilizator..." autocomplete="new-password" />
        }
        else
        {
            var dropDownItems = new List<SelectListItem>
            {
                new SelectListItem("Alege un grup", "0", true, true)
            };
            dropDownItems.AddRange(remainingEntities.Select(e => new SelectListItem(e.Key, e.Value.ToString())));
            @Html.DropDownList($"permissionsGroup", dropDownItems, new { onchange = "changeGroupId(this.options[this.selectedIndex].value, this.options[this.selectedIndex].text)" });
        }
        <p id="tributeHolder" style="position:relative">&nbsp;</p>
        <div class="FlexCenter">
            <div id="entityName_@(Model.Self)">@entityName nou</div>
            <div class="FlexRight PostInputWidth">
                @Html.DropDownList(
                    $"dto.{Model.EntityType}ForumPermissions[{index++}]",
                    roles.Select(p => new SelectListItem(p.RoleDescription, $"0_{p.RoleId}")),
                    new { id = $"newPermissions_{Model.Self}", style = "width:95%" }
                )
            </div>
        </div>
    </div>
    @if (Model.EntityType == AclEntityType.User)
    {
        <link rel="stylesheet" href="~/lib/tribute/dist/tribute.css" />
        <script src="~/lib/tribute/dist/tribute.js"></script>
        <script type="text/javascript">
            var tribute = new Tribute({
                values: @Html.Raw(_writingSerivce.ToCamelCaseJson(remainingEntities)),
                selectTemplate: function (item) {
                    return item.original.key;
                },
                allowSpaces: true,
                trigger: ' ',
                menuContainer: document.getElementById("tributeHolder"),
                positionMenu: false,
            });

            var permissionsUser = document.getElementById("permissionsUser");
            var oldUserValue = 0;

            tribute.attach(permissionsUser);

            permissionsUser.addEventListener("tribute-replaced", function(e) {
                var newValue = e.detail.item.original.value;
                var newKey = e.detail.item.original.key
                changeIds_@(Model.Self)(oldUserValue, newValue);
                permissionsUser.value = newKey;
                oldUserValue = newValue;
                document.getElementById("entityName_@(Model.Self)").innerText = newKey;
            });

            permissionsUser.addEventListener("focusin", function (e) {
                tribute.showMenuForCollection(permissionsUser);
            });
        </script>
    }
    else
    {
        <script type="text/javascript">
                    var oldGroupValue = 0;
                    function changeGroupId(newValue, newKey) {
                        changeIds_@(Model.Self)(oldGroupValue, newValue);
                        oldGroupValue = newValue;
                        document.getElementById("entityName_@(Model.Self)").innerText = newKey;
                    }
        </script>
    }
}
