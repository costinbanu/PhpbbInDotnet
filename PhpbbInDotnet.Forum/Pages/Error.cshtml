@page
@model ErrorModel

@using Domain
@using Domain.Utilities
@using Microsoft.Extensions.Configuration

@inject IConfiguration _config

@{
    ViewData["Title"] = Model.TranslationProvider.Errors[Model.Language, "ERROR", Casing.Title];
    var adminEmail = _config.GetValue<string>("AdminEmail");
    var displayContact = !Model.IsUnauthorized && !Model.IsNotFound;
}

<h3 class="Error">@Html.Raw(Model.TranslationProvider.Errors[Model.Language, "AN_ERROR_OCCURRED", Casing.Title])</h3>

@if (Model.IsUnauthorized)
{
    <p>@Html.Raw(Model.TranslationProvider.Errors[Model.Language, "ERROR_UNAUTHORIZED"])</p>
}
else if (Model.IsNotFound)
{
    <p>@Html.Raw(Model.TranslationProvider.Errors[Model.Language, "ERROR_NOT_FOUND"])</p>
}
else if (!string.IsNullOrWhiteSpace(Model.CustomErrorMessage))
{
    <p>@Html.Raw(await CompressionUtility.DecodeAndDecompress(Model.CustomErrorMessage))</p>
}

@if(displayContact)
{
    if (!string.IsNullOrWhiteSpace(Model.ErrorId))
    {
        <p>
            <strong>ID:</strong>
            <code>@Model.ErrorId</code>
        </p>
    }
    <p>
        @Html.Raw(
            string.IsNullOrWhiteSpace(Model.ErrorId) 
                ? string.Format(Model.TranslationProvider.Errors[Model.Language, "REPORT_ERROR_FORMAT"], adminEmail) 
                : string.Format(Model.TranslationProvider.Errors[Model.Language, "REPORT_ERROR_WITH_ID_FORMAT"], adminEmail)
        )
    </p>
}